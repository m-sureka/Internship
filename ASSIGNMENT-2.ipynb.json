{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "117f05b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: selenium in /opt/anaconda3/lib/python3.9/site-packages (4.7.2)\n",
      "Requirement already satisfied: certifi>=2021.10.8 in /opt/anaconda3/lib/python3.9/site-packages (from selenium) (2021.10.8)\n",
      "Requirement already satisfied: trio~=0.17 in /opt/anaconda3/lib/python3.9/site-packages (from selenium) (0.22.0)\n",
      "Requirement already satisfied: trio-websocket~=0.9 in /opt/anaconda3/lib/python3.9/site-packages (from selenium) (0.9.2)\n",
      "Requirement already satisfied: urllib3[socks]~=1.26 in /opt/anaconda3/lib/python3.9/site-packages (from selenium) (1.26.9)\n",
      "Requirement already satisfied: idna in /opt/anaconda3/lib/python3.9/site-packages (from trio~=0.17->selenium) (3.3)\n",
      "Requirement already satisfied: exceptiongroup>=1.0.0rc9 in /opt/anaconda3/lib/python3.9/site-packages (from trio~=0.17->selenium) (1.0.4)\n",
      "Requirement already satisfied: sniffio in /opt/anaconda3/lib/python3.9/site-packages (from trio~=0.17->selenium) (1.2.0)\n",
      "Requirement already satisfied: sortedcontainers in /opt/anaconda3/lib/python3.9/site-packages (from trio~=0.17->selenium) (2.4.0)\n",
      "Requirement already satisfied: async-generator>=1.9 in /opt/anaconda3/lib/python3.9/site-packages (from trio~=0.17->selenium) (1.10)\n",
      "Requirement already satisfied: attrs>=19.2.0 in /opt/anaconda3/lib/python3.9/site-packages (from trio~=0.17->selenium) (21.4.0)\n",
      "Requirement already satisfied: outcome in /opt/anaconda3/lib/python3.9/site-packages (from trio~=0.17->selenium) (1.2.0)\n",
      "Requirement already satisfied: wsproto>=0.14 in /opt/anaconda3/lib/python3.9/site-packages (from trio-websocket~=0.9->selenium) (1.2.0)\n",
      "Requirement already satisfied: PySocks!=1.5.7,<2.0,>=1.5.6 in /opt/anaconda3/lib/python3.9/site-packages (from urllib3[socks]~=1.26->selenium) (1.7.1)\n",
      "Requirement already satisfied: h11<1,>=0.9.0 in /opt/anaconda3/lib/python3.9/site-packages (from wsproto>=0.14->trio-websocket~=0.9->selenium) (0.14.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install selenium"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "74760a37",
   "metadata": {},
   "outputs": [],
   "source": [
    "import selenium\n",
    "import pandas as pd\n",
    "from selenium import webdriver\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from selenium.webdriver.common.by import By\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "94a920c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "driver=webdriver.Chrome(r'/Users/muskansureka/Desktop/chromedriver.exe')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ba1ccc0",
   "metadata": {},
   "source": [
    "QUESTION-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d4476bab",
   "metadata": {},
   "outputs": [],
   "source": [
    "driver.get('https://www.naukri.com/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "01795802",
   "metadata": {},
   "outputs": [],
   "source": [
    "designation=driver.find_element(By.CLASS_NAME,'suggestor-input')\n",
    "designation.send_keys('Data Analyst')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7007f2da",
   "metadata": {},
   "outputs": [],
   "source": [
    "location=driver.find_element(By.XPATH,'/html/body/div[1]/div[6]/div/div/div[5]/div/div/div/input')\n",
    "location.send_keys('Bangalore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "93794661",
   "metadata": {},
   "outputs": [],
   "source": [
    "search=driver.find_element(By.CLASS_NAME,'qsbSubmit')\n",
    "search.click()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a037121d",
   "metadata": {},
   "outputs": [],
   "source": [
    "job_title=[]\n",
    "job_location=[]\n",
    "company_name=[]\n",
    "experience_required=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e4636c92",
   "metadata": {},
   "outputs": [],
   "source": [
    "title_tags=driver.find_elements(By.XPATH,'//a[@class=\"title fw500 ellipsis\"]')\n",
    "for i in title_tags[0:10]:\n",
    "    title=i.text\n",
    "    job_title.append(title)\n",
    "location_tags=driver.find_elements(By.XPATH,'//li[@class=\"fleft grey-text br2 placeHolderLi location\"]')\n",
    "for i in location_tags[0:10]:\n",
    "    location=i.text\n",
    "    job_location.append(location)\n",
    "company_tags=driver.find_elements(By.XPATH,'//a[@class=\"subTitle ellipsis fleft\"]')\n",
    "for i in company_tags[0:10]:\n",
    "    company=i.text\n",
    "    company_name.append(company)\n",
    "experience_tags=driver.find_elements(By.XPATH,'//li[@class=\"fleft grey-text br2 placeHolderLi experience\"]//span')\n",
    "for i in experience_tags[0:10]:\n",
    "    experience=i.text\n",
    "    experience_required.append(experience)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1e51f4a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 0 0 0\n"
     ]
    }
   ],
   "source": [
    "print(len(job_title),len(job_location),len(company_name),len(experience_required))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ebe7d79b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Job Title</th>\n",
       "      <th>Job Location</th>\n",
       "      <th>Company Name</th>\n",
       "      <th>Experience Required</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Job Title, Job Location, Company Name, Experience Required]\n",
       "Index: []"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.DataFrame({'Job Title':job_title,'Job Location':job_location,'Company Name':company_name,'Experience Required':experience_required})\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0062fe80",
   "metadata": {},
   "source": [
    "QUESTION-2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ef02aa03",
   "metadata": {},
   "outputs": [],
   "source": [
    "driver.get('https://www.naukri.com/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "09022ee8",
   "metadata": {},
   "outputs": [],
   "source": [
    "designation=driver.find_element(By.CLASS_NAME,'suggestor-input')\n",
    "designation.send_keys('Data Scientist')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e4496853",
   "metadata": {},
   "outputs": [],
   "source": [
    "location=driver.find_element(By.XPATH,'/html/body/div[1]/div[6]/div/div/div[5]/div/div/div/input')\n",
    "location.send_keys('Bangalore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e34307cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "search=driver.find_element(By.CLASS_NAME,'qsbSubmit')\n",
    "search.click()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f7700508",
   "metadata": {},
   "outputs": [],
   "source": [
    "job_title=[]\n",
    "job_location=[]\n",
    "company_name=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "27aa1b84",
   "metadata": {},
   "outputs": [],
   "source": [
    "title_tags=driver.find_elements(By.XPATH,'//a[@class=\"title fw500 ellipsis\"]')\n",
    "for i in title_tags[0:10]:\n",
    "    title=i.text\n",
    "    job_title.append(title)\n",
    "location_tags=driver.find_elements(By.XPATH,'//li[@class=\"fleft grey-text br2 placeHolderLi location\"]')\n",
    "for i in location_tags[0:10]:\n",
    "    location=i.text\n",
    "    job_location.append(location)\n",
    "company_tags=driver.find_elements(By.XPATH,'//a[@class=\"subTitle ellipsis fleft\"]')\n",
    "for i in company_tags[0:10]:\n",
    "    company=i.text\n",
    "    company_name.append(company)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1c0fca77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 10 10\n"
     ]
    }
   ],
   "source": [
    "print(len(job_title),len(job_location),len(company_name))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "58296ef9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Job Title</th>\n",
       "      <th>Job Location</th>\n",
       "      <th>Company Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Hybrid - Bangalore/Bengaluru, Noida, Hyderabad...</td>\n",
       "      <td>Birlasoft</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Analystics &amp; Modeling Specialist</td>\n",
       "      <td>Bangalore/Bengaluru, Kolkata, Mumbai, Hyderaba...</td>\n",
       "      <td>Accenture</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Manager</td>\n",
       "      <td>Bangalore/Bengaluru, Mumbai, Hyderabad/Secunde...</td>\n",
       "      <td>PwC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>DATA SCIENTIST III</td>\n",
       "      <td>Bangalore/Bengaluru</td>\n",
       "      <td>Walmart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Hiring Data Scientist // Bangalore</td>\n",
       "      <td>Hybrid - Bangalore/Bengaluru</td>\n",
       "      <td>Randstad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Hybrid - Bangalore/Bengaluru, Noida, Kolkata, ...</td>\n",
       "      <td>Mindtree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Senior Data Scientist</td>\n",
       "      <td>Bangalore/Bengaluru, Mumbai</td>\n",
       "      <td>Baker Hughes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Bangalore/Bengaluru</td>\n",
       "      <td>Infosys</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Data &amp; Analytics Lead, Geo Analytics - GAMMA</td>\n",
       "      <td>Bangalore/Bengaluru</td>\n",
       "      <td>Boston Consulting Group</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Weather and Climate Data Scientist</td>\n",
       "      <td>Bangalore/Bengaluru</td>\n",
       "      <td>Shell Pvt Ltd</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      Job Title  \\\n",
       "0                                Data Scientist   \n",
       "1              Analystics & Modeling Specialist   \n",
       "2                                       Manager   \n",
       "3                            DATA SCIENTIST III   \n",
       "4            Hiring Data Scientist // Bangalore   \n",
       "5                                Data Scientist   \n",
       "6                         Senior Data Scientist   \n",
       "7                                Data Scientist   \n",
       "8  Data & Analytics Lead, Geo Analytics - GAMMA   \n",
       "9            Weather and Climate Data Scientist   \n",
       "\n",
       "                                        Job Location             Company Name  \n",
       "0  Hybrid - Bangalore/Bengaluru, Noida, Hyderabad...                Birlasoft  \n",
       "1  Bangalore/Bengaluru, Kolkata, Mumbai, Hyderaba...                Accenture  \n",
       "2  Bangalore/Bengaluru, Mumbai, Hyderabad/Secunde...                      PwC  \n",
       "3                                Bangalore/Bengaluru                  Walmart  \n",
       "4                       Hybrid - Bangalore/Bengaluru                 Randstad  \n",
       "5  Hybrid - Bangalore/Bengaluru, Noida, Kolkata, ...                 Mindtree  \n",
       "6                        Bangalore/Bengaluru, Mumbai             Baker Hughes  \n",
       "7                                Bangalore/Bengaluru                  Infosys  \n",
       "8                                Bangalore/Bengaluru  Boston Consulting Group  \n",
       "9                                Bangalore/Bengaluru            Shell Pvt Ltd  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.DataFrame({'Job Title':job_title,'Job Location':job_location,'Company Name':company_name})\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4725e6c",
   "metadata": {},
   "source": [
    "QUESTION-3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "1c88a49c",
   "metadata": {},
   "outputs": [],
   "source": [
    "driver.get('https://www.naukri.com/jobs-in-india?clusters=roleGid,citiesGid&roleTypeFilterGid=169&cityTypeGid=9508&ctcFilter=3to6')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "50d05774",
   "metadata": {},
   "outputs": [],
   "source": [
    "job_title=[]\n",
    "job_location=[]\n",
    "company_name=[]\n",
    "experience_required=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "911d066a",
   "metadata": {},
   "outputs": [],
   "source": [
    "title_tags=driver.find_elements(By.XPATH,'//a[@class=\"title fw500 ellipsis\"]')\n",
    "for i in title_tags[0:10]:\n",
    "    title=i.text\n",
    "    job_title.append(title)\n",
    "location_tags=driver.find_elements(By.XPATH,'//li[@class=\"fleft grey-text br2 placeHolderLi location\"]')\n",
    "for i in location_tags[0:10]:\n",
    "    location=i.text\n",
    "    job_location.append(location)\n",
    "company_tags=driver.find_elements(By.XPATH,'//a[@class=\"subTitle ellipsis fleft\"]')\n",
    "for i in company_tags[0:10]:\n",
    "    company=i.text\n",
    "    company_name.append(company)\n",
    "experience_tags=driver.find_elements(By.XPATH,'//li[@class=\"fleft grey-text br2 placeHolderLi experience\"]//span')\n",
    "for i in experience_tags[0:10]:\n",
    "    experience=i.text\n",
    "    experience_required.append(experience)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ae563d89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 10 10 10\n"
     ]
    }
   ],
   "source": [
    "print(len(job_title),len(job_location),len(company_name),len(experience_required))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ed8f483e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Job Title</th>\n",
       "      <th>Job Location</th>\n",
       "      <th>Company Name</th>\n",
       "      <th>Experience Required</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Artificial Intelligence/Computer Vision Engine...</td>\n",
       "      <td>Delhi / NCR, Kolkata, Mumbai, Hyderabad/Secund...</td>\n",
       "      <td>Vicara</td>\n",
       "      <td>1-3 Yrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Data Activation Specialist - Adobe Target</td>\n",
       "      <td>Delhi / NCR, Kolkata, Mumbai, Hyderabad/Secund...</td>\n",
       "      <td>Okda Solutions</td>\n",
       "      <td>7-10 Yrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Data Scientist - Engine Algorithm</td>\n",
       "      <td>Delhi / NCR, Kolkata, Mumbai, Hyderabad/Secund...</td>\n",
       "      <td>Primo Hiring</td>\n",
       "      <td>1-3 Yrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Associate Data Scientist</td>\n",
       "      <td>Noida</td>\n",
       "      <td>Navikenz India</td>\n",
       "      <td>3-8 Yrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Temp. WFH - Noida</td>\n",
       "      <td>NGI Ventures</td>\n",
       "      <td>1-5 Yrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Dehradun, Hyderabad/Secunderabad, Gurgaon/Guru...</td>\n",
       "      <td>torcai digital media</td>\n",
       "      <td>2-7 Yrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Opening For Jr. Data Scientist with Tatras Dat...</td>\n",
       "      <td>Delhi / NCR</td>\n",
       "      <td>Tatras Data Services</td>\n",
       "      <td>2-4 Yrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Gurgaon/Gurugram</td>\n",
       "      <td>Americana Restaurants (india)</td>\n",
       "      <td>3-8 Yrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>URGENT: Data Scientist | Gurugram | 5 Days Wor...</td>\n",
       "      <td>Gurgaon/Gurugram</td>\n",
       "      <td>Digilytics</td>\n",
       "      <td>2-5 Yrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Data Scientist | Boutique AI and data consulti...</td>\n",
       "      <td>Noida, New Delhi, Gurgaon/Gurugram</td>\n",
       "      <td>unnati</td>\n",
       "      <td>2-7 Yrs</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           Job Title  \\\n",
       "0  Artificial Intelligence/Computer Vision Engine...   \n",
       "1          Data Activation Specialist - Adobe Target   \n",
       "2                  Data Scientist - Engine Algorithm   \n",
       "3                           Associate Data Scientist   \n",
       "4                                     Data Scientist   \n",
       "5                                     Data Scientist   \n",
       "6  Opening For Jr. Data Scientist with Tatras Dat...   \n",
       "7                                     Data Scientist   \n",
       "8  URGENT: Data Scientist | Gurugram | 5 Days Wor...   \n",
       "9  Data Scientist | Boutique AI and data consulti...   \n",
       "\n",
       "                                        Job Location  \\\n",
       "0  Delhi / NCR, Kolkata, Mumbai, Hyderabad/Secund...   \n",
       "1  Delhi / NCR, Kolkata, Mumbai, Hyderabad/Secund...   \n",
       "2  Delhi / NCR, Kolkata, Mumbai, Hyderabad/Secund...   \n",
       "3                                              Noida   \n",
       "4                                  Temp. WFH - Noida   \n",
       "5  Dehradun, Hyderabad/Secunderabad, Gurgaon/Guru...   \n",
       "6                                        Delhi / NCR   \n",
       "7                                   Gurgaon/Gurugram   \n",
       "8                                   Gurgaon/Gurugram   \n",
       "9                 Noida, New Delhi, Gurgaon/Gurugram   \n",
       "\n",
       "                    Company Name Experience Required  \n",
       "0                         Vicara             1-3 Yrs  \n",
       "1                 Okda Solutions            7-10 Yrs  \n",
       "2                   Primo Hiring             1-3 Yrs  \n",
       "3                 Navikenz India             3-8 Yrs  \n",
       "4                   NGI Ventures             1-5 Yrs  \n",
       "5           torcai digital media             2-7 Yrs  \n",
       "6           Tatras Data Services             2-4 Yrs  \n",
       "7  Americana Restaurants (india)             3-8 Yrs  \n",
       "8                     Digilytics             2-5 Yrs  \n",
       "9                         unnati             2-7 Yrs  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.DataFrame({'Job Title':job_title,'Job Location':job_location,'Company Name':company_name,'Experience Required':experience_required})\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ee7c998",
   "metadata": {},
   "source": [
    "QUESTION-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "8a8f813f",
   "metadata": {},
   "outputs": [],
   "source": [
    "driver.get('https://www.flipkart.com/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c22477f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "product=driver.find_element(By.CLASS_NAME,'_3704LK')\n",
    "product.send_keys('sunglasses')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "17bf4db2",
   "metadata": {},
   "outputs": [],
   "source": [
    "search=driver.find_element(By.CLASS_NAME,'L0Z3Pu')\n",
    "search.click()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6c6f11bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "brand_name=[]\n",
    "description=[]\n",
    "price=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "50cc2dde",
   "metadata": {},
   "outputs": [],
   "source": [
    "brand_tags=driver.find_elements(By.XPATH,'//div[@class=\"_2WkVRV\"]')\n",
    "for i in brand_tags:\n",
    "    brand=i.text\n",
    "    brand_name.append(brand)\n",
    "time.sleep(5)\n",
    "desc_tags=driver.find_elements(By.XPATH,'//a[@class=\"IRpwTa\"]')\n",
    "for i in desc_tags:\n",
    "    desc=i.text\n",
    "    description.append(desc)\n",
    "time.sleep(5)\n",
    "price_tags=driver.find_elements(By.XPATH,'//div[@class=\"_30jeq3\"]')\n",
    "for i in price_tags:\n",
    "    prices=i.text\n",
    "    price.append(prices)\n",
    "time.sleep(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "4e075aad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40 40 40\n"
     ]
    }
   ],
   "source": [
    "print(len(brand_name),len(description),len(price))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "8f8da9d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "start=0\n",
    "end=2\n",
    "for page in range(start,end):\n",
    "    brands=driver.find_elements(By.XPATH,'//div[@class=\"_2WkVRV\"]')\n",
    "    for i in brands:\n",
    "        brand_name.append(i.text)\n",
    "    next_button=driver.find_element(By.XPATH,'//a[@class=\"_1LKTO3\"]')\n",
    "    next_button.click()\n",
    "    time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "d0bac993",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "120"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(brand_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "5e5ec1bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "start=0\n",
    "end=2\n",
    "for page in range(start,end):\n",
    "    desc=driver.find_elements(By.XPATH,'//a[@class=\"IRpwTa\"]')\n",
    "    for i in desc:\n",
    "        description.append(i.text)\n",
    "    next_button=driver.find_element(By.XPATH,'//a[@class=\"_1LKTO3\"]')\n",
    "    next_button.click()\n",
    "    time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "c9bfeacc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "120"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(description)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "54e7d6c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "start=0\n",
    "end=2\n",
    "for page in range(start,end):\n",
    "    prices=driver.find_elements(By.XPATH,'//div[@class=\"_30jeq3\"]')\n",
    "    for i in prices:\n",
    "        price.append(i.text)\n",
    "    next_button=driver.find_element(By.XPATH,'//a[@class=\"_1LKTO3\"]')\n",
    "    next_button.click()\n",
    "    time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "2486c77b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "120"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(price)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "965cc414",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand Name</th>\n",
       "      <th>Description</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Eyewearlabs</td>\n",
       "      <td>Polarized Round Sunglasses (51)</td>\n",
       "      <td>₹1,614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ROZZETTA CRAFT</td>\n",
       "      <td>UV Protection, Gradient Round Sunglasses (Free...</td>\n",
       "      <td>₹399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LIZA ANGEL</td>\n",
       "      <td>Riding Glasses, Night Vision Spectacle Sunglas...</td>\n",
       "      <td>₹129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Elligator</td>\n",
       "      <td>UV Protection Round Sunglasses (53)</td>\n",
       "      <td>₹149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Fastrack</td>\n",
       "      <td>UV Protection Aviator Sunglasses (58)</td>\n",
       "      <td>₹779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>Fastrack</td>\n",
       "      <td>UV Protection Wayfarer Sunglasses (55)</td>\n",
       "      <td>₹606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>ROYAL SON</td>\n",
       "      <td>Polarized, UV Protection Aviator Sunglasses (55)</td>\n",
       "      <td>₹949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>Els</td>\n",
       "      <td>by Lenskart Polarized, UV Protection Cat-eye S...</td>\n",
       "      <td>₹749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>VINCENT CHASE</td>\n",
       "      <td>Polarized, UV Protection Round Sunglasses (51)</td>\n",
       "      <td>₹949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>Mi</td>\n",
       "      <td>Polarized Wayfarer Sunglasses (Free Size)</td>\n",
       "      <td>₹859</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>120 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Brand Name                                        Description   Price\n",
       "0       Eyewearlabs                    Polarized Round Sunglasses (51)  ₹1,614\n",
       "1    ROZZETTA CRAFT  UV Protection, Gradient Round Sunglasses (Free...    ₹399\n",
       "2        LIZA ANGEL  Riding Glasses, Night Vision Spectacle Sunglas...    ₹129\n",
       "3         Elligator                UV Protection Round Sunglasses (53)    ₹149\n",
       "4          Fastrack              UV Protection Aviator Sunglasses (58)    ₹779\n",
       "..              ...                                                ...     ...\n",
       "115        Fastrack             UV Protection Wayfarer Sunglasses (55)    ₹606\n",
       "116       ROYAL SON   Polarized, UV Protection Aviator Sunglasses (55)    ₹949\n",
       "117             Els  by Lenskart Polarized, UV Protection Cat-eye S...    ₹749\n",
       "118   VINCENT CHASE     Polarized, UV Protection Round Sunglasses (51)    ₹949\n",
       "119              Mi          Polarized Wayfarer Sunglasses (Free Size)    ₹859\n",
       "\n",
       "[120 rows x 3 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.DataFrame({'Brand Name':brand_name,'Description':description,'Price':price})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "13c2d403",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand Name</th>\n",
       "      <th>Description</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Eyewearlabs</td>\n",
       "      <td>Polarized Round Sunglasses (51)</td>\n",
       "      <td>₹1,614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ROZZETTA CRAFT</td>\n",
       "      <td>UV Protection, Gradient Round Sunglasses (Free...</td>\n",
       "      <td>₹399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LIZA ANGEL</td>\n",
       "      <td>Riding Glasses, Night Vision Spectacle Sunglas...</td>\n",
       "      <td>₹129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Elligator</td>\n",
       "      <td>UV Protection Round Sunglasses (53)</td>\n",
       "      <td>₹149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Fastrack</td>\n",
       "      <td>UV Protection Aviator Sunglasses (58)</td>\n",
       "      <td>₹779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>ROYAL SON</td>\n",
       "      <td>UV Protection, Polarized Wayfarer Sunglasses (54)</td>\n",
       "      <td>₹799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>VINCENT CHASE</td>\n",
       "      <td>UV Protection Wrap-around Sunglasses (Free Size)</td>\n",
       "      <td>₹806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>VINCENT CHASE</td>\n",
       "      <td>UV Protection, Toughened Glass Lens Rectangula...</td>\n",
       "      <td>₹194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>Dannilo</td>\n",
       "      <td>Riding Glasses, Others Oval, Round Sunglasses ...</td>\n",
       "      <td>₹199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>IZAAN MART</td>\n",
       "      <td>Night Vision Rectangular Sunglasses (55)</td>\n",
       "      <td>₹290</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Brand Name                                        Description   Price\n",
       "0      Eyewearlabs                    Polarized Round Sunglasses (51)  ₹1,614\n",
       "1   ROZZETTA CRAFT  UV Protection, Gradient Round Sunglasses (Free...    ₹399\n",
       "2       LIZA ANGEL  Riding Glasses, Night Vision Spectacle Sunglas...    ₹129\n",
       "3        Elligator                UV Protection Round Sunglasses (53)    ₹149\n",
       "4         Fastrack              UV Protection Aviator Sunglasses (58)    ₹779\n",
       "..             ...                                                ...     ...\n",
       "95       ROYAL SON  UV Protection, Polarized Wayfarer Sunglasses (54)    ₹799\n",
       "96   VINCENT CHASE   UV Protection Wrap-around Sunglasses (Free Size)    ₹806\n",
       "97   VINCENT CHASE  UV Protection, Toughened Glass Lens Rectangula...    ₹194\n",
       "98         Dannilo  Riding Glasses, Others Oval, Round Sunglasses ...    ₹199\n",
       "99      IZAAN MART           Night Vision Rectangular Sunglasses (55)    ₹290\n",
       "\n",
       "[100 rows x 3 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.iloc[0:100,:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba5312c4",
   "metadata": {},
   "source": [
    "QUESTION-5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "00412cf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "driver.get('https://www.flipkart.com/apple-iphone-11-black-64-gb/product-reviews/itm4e5041ba101fd?pid=MOBFWQ6BXGJCEYNY&lid=LSTMOBFWQ6BXGJCEYNYZXSHRJ&marketplace=FLIPKART')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "9e376539",
   "metadata": {},
   "outputs": [],
   "source": [
    "rating=[]\n",
    "review_s=[]\n",
    "review=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "b3ca4914",
   "metadata": {},
   "outputs": [],
   "source": [
    "rating_tags=driver.find_elements(By.XPATH,'//div[@class=\"_3LWZlK _1BLPMq\"]')\n",
    "for i in rating_tags:\n",
    "    ratings=i.text\n",
    "    rating.append(ratings)\n",
    "time.sleep(5)\n",
    "reviewsum=driver.find_elements(By.XPATH,'//p[@class=\"_2-N8zT\"]')\n",
    "for i in reviewsum:\n",
    "    rsum=i.text\n",
    "    review_s.append(rsum)\n",
    "time.sleep(5)\n",
    "reviewall=driver.find_elements(By.XPATH,'//div[@class=\"t-ZTKy\"]')\n",
    "for i in reviewall:\n",
    "    reviewt=i.text\n",
    "    review.append(reviewt)\n",
    "time.sleep(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "b7f10ee3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 10 10\n"
     ]
    }
   ],
   "source": [
    "print(len(rating),len(review_s),len(review))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "779d6557",
   "metadata": {},
   "outputs": [],
   "source": [
    "start=0\n",
    "end=10\n",
    "for page in range(start,end):\n",
    "    rating_tags=driver.find_elements(By.XPATH,'//div[@class=\"_3LWZlK _1BLPMq\"]')\n",
    "    for i in rating_tags:\n",
    "        rating.append(i.text)\n",
    "    next_button=driver.find_element(By.XPATH,'//a[@class=\"_1LKTO3\"]')\n",
    "    next_button.click()\n",
    "    time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "90ae2353",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "110"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(rating)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "5da741c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "start=0\n",
    "end=10\n",
    "for page in range(start,end):\n",
    "    reviewsum=driver.find_elements(By.XPATH,'//p[@class=\"_2-N8zT\"]')\n",
    "    for i in reviewsum:\n",
    "        review_s.append(i.text)\n",
    "    next_button=driver.find_element(By.XPATH,'//a[@class=\"_1LKTO3\"]')\n",
    "    next_button.click()\n",
    "    time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "6eaa1a1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "110"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(review_s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "1734810a",
   "metadata": {},
   "outputs": [],
   "source": [
    "start=0\n",
    "end=10\n",
    "for page in range(start,end):\n",
    "    reviewall=driver.find_elements(By.XPATH,'//div[@class=\"t-ZTKy\"]')\n",
    "    for i in reviewall:\n",
    "        review.append(i.text)\n",
    "    next_button=driver.find_element(By.XPATH,'//a[@class=\"_1LKTO3\"]')\n",
    "    next_button.click()\n",
    "    time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "072c3789",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "110"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(review)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "e9508b53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rating</th>\n",
       "      <th>Review Summary</th>\n",
       "      <th>Full Review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>Simply awesome</td>\n",
       "      <td>Really satisfied with the Product I received.....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>Perfect product!</td>\n",
       "      <td>Amazing phone with great cameras and better ba...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>Best in the market!</td>\n",
       "      <td>Great iPhone very snappy experience as apple k...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Value-for-money</td>\n",
       "      <td>I'm Really happy with the product\\nDelivery wa...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Highly recommended</td>\n",
       "      <td>It's my first time to use iOS phone and I am l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>5</td>\n",
       "      <td>Perfect product!</td>\n",
       "      <td>It’s a must buy who is looking for an upgrade ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>5</td>\n",
       "      <td>Perfect product!</td>\n",
       "      <td>Value for money❤️❤️\\nIts awesome mobile phone ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>5</td>\n",
       "      <td>Perfect product!</td>\n",
       "      <td>It is just awesome mobile for this price from ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>5</td>\n",
       "      <td>Highly recommended</td>\n",
       "      <td>iphone 11 is a very good phone to buy only if ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>4</td>\n",
       "      <td>Value-for-money</td>\n",
       "      <td>Just got this iphone 11\\nAnd it is most powerf...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>110 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Rating       Review Summary  \\\n",
       "0        5       Simply awesome   \n",
       "1        5     Perfect product!   \n",
       "2        5  Best in the market!   \n",
       "3        4      Value-for-money   \n",
       "4        5   Highly recommended   \n",
       "..     ...                  ...   \n",
       "105      5     Perfect product!   \n",
       "106      5     Perfect product!   \n",
       "107      5     Perfect product!   \n",
       "108      5   Highly recommended   \n",
       "109      4      Value-for-money   \n",
       "\n",
       "                                           Full Review  \n",
       "0    Really satisfied with the Product I received.....  \n",
       "1    Amazing phone with great cameras and better ba...  \n",
       "2    Great iPhone very snappy experience as apple k...  \n",
       "3    I'm Really happy with the product\\nDelivery wa...  \n",
       "4    It's my first time to use iOS phone and I am l...  \n",
       "..                                                 ...  \n",
       "105  It’s a must buy who is looking for an upgrade ...  \n",
       "106  Value for money❤️❤️\\nIts awesome mobile phone ...  \n",
       "107  It is just awesome mobile for this price from ...  \n",
       "108  iphone 11 is a very good phone to buy only if ...  \n",
       "109  Just got this iphone 11\\nAnd it is most powerf...  \n",
       "\n",
       "[110 rows x 3 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.DataFrame({'Rating':rating,'Review Summary':review_s,'Full Review':review})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "257e17b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rating</th>\n",
       "      <th>Review Summary</th>\n",
       "      <th>Full Review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>Simply awesome</td>\n",
       "      <td>Really satisfied with the Product I received.....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>Perfect product!</td>\n",
       "      <td>Amazing phone with great cameras and better ba...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>Best in the market!</td>\n",
       "      <td>Great iPhone very snappy experience as apple k...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Value-for-money</td>\n",
       "      <td>I'm Really happy with the product\\nDelivery wa...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Highly recommended</td>\n",
       "      <td>It's my first time to use iOS phone and I am l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>5</td>\n",
       "      <td>Worth every penny</td>\n",
       "      <td>Previously I was using one plus 3t it was a gr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>5</td>\n",
       "      <td>Perfect product!</td>\n",
       "      <td>Value for money\\n5 star rating\\nExcellent came...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>5</td>\n",
       "      <td>Highly recommended</td>\n",
       "      <td>What a camera .....just awesome ..you can feel...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>5</td>\n",
       "      <td>Great product</td>\n",
       "      <td>Amazing Powerful and Durable Gadget.\\n\\nI’m am...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>5</td>\n",
       "      <td>Fabulous!</td>\n",
       "      <td>This is my first iOS phone. I am very happy wi...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rating       Review Summary  \\\n",
       "0       5       Simply awesome   \n",
       "1       5     Perfect product!   \n",
       "2       5  Best in the market!   \n",
       "3       4      Value-for-money   \n",
       "4       5   Highly recommended   \n",
       "..    ...                  ...   \n",
       "95      5    Worth every penny   \n",
       "96      5     Perfect product!   \n",
       "97      5   Highly recommended   \n",
       "98      5        Great product   \n",
       "99      5            Fabulous!   \n",
       "\n",
       "                                          Full Review  \n",
       "0   Really satisfied with the Product I received.....  \n",
       "1   Amazing phone with great cameras and better ba...  \n",
       "2   Great iPhone very snappy experience as apple k...  \n",
       "3   I'm Really happy with the product\\nDelivery wa...  \n",
       "4   It's my first time to use iOS phone and I am l...  \n",
       "..                                                ...  \n",
       "95  Previously I was using one plus 3t it was a gr...  \n",
       "96  Value for money\\n5 star rating\\nExcellent came...  \n",
       "97  What a camera .....just awesome ..you can feel...  \n",
       "98  Amazing Powerful and Durable Gadget.\\n\\nI’m am...  \n",
       "99  This is my first iOS phone. I am very happy wi...  \n",
       "\n",
       "[100 rows x 3 columns]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.iloc[0:100,:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "888b2510",
   "metadata": {},
   "source": [
    "QUESTION-6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "be50c934",
   "metadata": {},
   "outputs": [],
   "source": [
    "driver=webdriver.Chrome(r'/Users/muskansureka/Desktop/chromedriver.exe')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "b4785602",
   "metadata": {},
   "outputs": [],
   "source": [
    "driver.get('https://www.flipkart.com/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "0db30870",
   "metadata": {},
   "outputs": [],
   "source": [
    "product=driver.find_element(By.CLASS_NAME,'_3704LK')\n",
    "product.send_keys('sneakers')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "71db8afb",
   "metadata": {},
   "outputs": [],
   "source": [
    "search=driver.find_element(By.CLASS_NAME,'L0Z3Pu')\n",
    "search.click()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "58127968",
   "metadata": {},
   "outputs": [],
   "source": [
    "brand=[]\n",
    "product_desc=[]\n",
    "price=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "1f64fbb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "brand_tags=driver.find_elements(By.XPATH,'//div[@class=\"_2WkVRV\"]')\n",
    "for i in brand_tags:\n",
    "    brands=i.text\n",
    "    brand.append(brands)\n",
    "time.sleep(5)\n",
    "product_tags=driver.find_elements(By.XPATH,'//a[@class=\"IRpwTa _2-ICcC\"]')\n",
    "for i in product_tags:\n",
    "    product=i.text\n",
    "    product_desc.append(product)\n",
    "time.sleep(5)\n",
    "price_tags=driver.find_elements(By.XPATH,'//div[@class=\"_30jeq3\"]')\n",
    "for i in price_tags:\n",
    "    prices=i.text\n",
    "    price.append(prices)\n",
    "time.sleep(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "450e30dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(brand)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "d15b7905",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(product_desc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "eb64a6bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(price)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "103acf74",
   "metadata": {},
   "outputs": [],
   "source": [
    "product_description=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "0efae8c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "product_tags=driver.find_elements(By.XPATH,'//a[@class=\"IRpwTa\"]')\n",
    "for i in product_tags:\n",
    "    product=i.text\n",
    "    product_description.append(product)\n",
    "time.sleep(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "c43c4096",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "34"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(product_description)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "dc76ce36",
   "metadata": {},
   "outputs": [],
   "source": [
    "start=0\n",
    "end=2\n",
    "for page in range(start,end):\n",
    "    brand_tags=driver.find_elements(By.XPATH,'//div[@class=\"_2WkVRV\"]')\n",
    "    for i in brand_tags:\n",
    "        brand.append(i.text)\n",
    "    next_button=driver.find_element(By.XPATH,'//a[@class=\"_1LKTO3\"]')\n",
    "    next_button.click()\n",
    "    time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "b235d7da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "120"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(brand)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "f886ede6",
   "metadata": {},
   "outputs": [],
   "source": [
    "start=0\n",
    "end=2\n",
    "for page in range(start,end):\n",
    "    product_tags=driver.find_elements(By.XPATH,'//a[@class=\"IRpwTa _2-ICcC\"]')\n",
    "    for i in product_tags:\n",
    "        product_desc.append(i.text)\n",
    "    next_button=driver.find_element(By.XPATH,'//a[@class=\"_1LKTO3\"]')\n",
    "    next_button.click()\n",
    "    time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "b3e96f56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(product_desc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "94314ca6",
   "metadata": {},
   "outputs": [],
   "source": [
    "start=0\n",
    "end=2\n",
    "for page in range(start,end):\n",
    "    product_tags=driver.find_elements(By.XPATH,'//a[@class=\"IRpwTa\"]')\n",
    "    for i in product_tags:\n",
    "        product_description.append(i.text)\n",
    "    next_button=driver.find_element(By.XPATH,'//a[@class=\"_1LKTO3\"]')\n",
    "    next_button.click()\n",
    "    time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "f67137dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "95"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(product_description)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "530f4ddb",
   "metadata": {},
   "outputs": [],
   "source": [
    "list1=product_desc\n",
    "list2=product_description\n",
    "products=list1+list2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "566ae634",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "120"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(products)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "3f1b6635",
   "metadata": {},
   "outputs": [],
   "source": [
    "start=0\n",
    "end=2\n",
    "for page in range(start,end):\n",
    "    price_tags=driver.find_elements(By.XPATH,'//div[@class=\"_30jeq3\"]')\n",
    "    for i in price_tags:\n",
    "        price.append(i.text)\n",
    "    next_button=driver.find_element(By.XPATH,'//a[@class=\"_1LKTO3\"]')\n",
    "    next_button.click()\n",
    "    time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "1f627ced",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "120"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(price)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "e38b48d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand Name</th>\n",
       "      <th>Product Description</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Labbin</td>\n",
       "      <td>Ultralightweight | Comfortable | Breathable Wa...</td>\n",
       "      <td>₹399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BRUTON</td>\n",
       "      <td>Sneakers For Men</td>\n",
       "      <td>₹279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BRUTON</td>\n",
       "      <td>Sneakers For Men</td>\n",
       "      <td>₹199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BRUTON</td>\n",
       "      <td>Casual Sneakers Canvas White Shoes For Boys An...</td>\n",
       "      <td>₹266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Labbin</td>\n",
       "      <td>High Tops For Men (White) Sneakers For Men</td>\n",
       "      <td>₹399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>JACK &amp; JONES</td>\n",
       "      <td>Sneakers For Men</td>\n",
       "      <td>₹499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>PM TRADERS</td>\n",
       "      <td>Walking Shoes for Men | Running Shoes | Casual...</td>\n",
       "      <td>₹449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>PM TRADERS</td>\n",
       "      <td>Classic Sneakers For Men</td>\n",
       "      <td>₹1,423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>PUMA</td>\n",
       "      <td>X-Ray 2 Square Sneakers For Men</td>\n",
       "      <td>₹3,749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>bluemaker</td>\n",
       "      <td>Sneakers For Men</td>\n",
       "      <td>₹855</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>120 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Brand Name                                Product Description   Price\n",
       "0          Labbin  Ultralightweight | Comfortable | Breathable Wa...    ₹399\n",
       "1          BRUTON                                   Sneakers For Men    ₹279\n",
       "2          BRUTON                                   Sneakers For Men    ₹199\n",
       "3          BRUTON  Casual Sneakers Canvas White Shoes For Boys An...    ₹266\n",
       "4          Labbin         High Tops For Men (White) Sneakers For Men    ₹399\n",
       "..            ...                                                ...     ...\n",
       "115  JACK & JONES                                   Sneakers For Men    ₹499\n",
       "116    PM TRADERS  Walking Shoes for Men | Running Shoes | Casual...    ₹449\n",
       "117    PM TRADERS                           Classic Sneakers For Men  ₹1,423\n",
       "118          PUMA                    X-Ray 2 Square Sneakers For Men  ₹3,749\n",
       "119     bluemaker                                   Sneakers For Men    ₹855\n",
       "\n",
       "[120 rows x 3 columns]"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.DataFrame({'Brand Name':brand,'Product Description':products,'Price':price})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "550f5ca3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand Name</th>\n",
       "      <th>Product Description</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Labbin</td>\n",
       "      <td>Ultralightweight | Comfortable | Breathable Wa...</td>\n",
       "      <td>₹399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BRUTON</td>\n",
       "      <td>Sneakers For Men</td>\n",
       "      <td>₹279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BRUTON</td>\n",
       "      <td>Sneakers For Men</td>\n",
       "      <td>₹199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BRUTON</td>\n",
       "      <td>Casual Sneakers Canvas White Shoes For Boys An...</td>\n",
       "      <td>₹266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Labbin</td>\n",
       "      <td>High Tops For Men (White) Sneakers For Men</td>\n",
       "      <td>₹399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>Shozie</td>\n",
       "      <td>2 Combo Sneaker Shoes Sneakers For Men</td>\n",
       "      <td>₹3,499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>Elevarse</td>\n",
       "      <td>SOLFER PLUS Sneakers For Men</td>\n",
       "      <td>₹299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>BRUTON</td>\n",
       "      <td>Future-04 casual shoes for men | Latest Stylis...</td>\n",
       "      <td>₹581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>edisson</td>\n",
       "      <td>Modern Trendy Sneakers Shoes Sneakers For Men</td>\n",
       "      <td>₹1,374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>U.S. POLO ASSN.</td>\n",
       "      <td>Stylish Comfortable shoes Sneakers For Men</td>\n",
       "      <td>₹489</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Brand Name                                Product Description   Price\n",
       "0            Labbin  Ultralightweight | Comfortable | Breathable Wa...    ₹399\n",
       "1            BRUTON                                   Sneakers For Men    ₹279\n",
       "2            BRUTON                                   Sneakers For Men    ₹199\n",
       "3            BRUTON  Casual Sneakers Canvas White Shoes For Boys An...    ₹266\n",
       "4            Labbin         High Tops For Men (White) Sneakers For Men    ₹399\n",
       "..              ...                                                ...     ...\n",
       "95           Shozie             2 Combo Sneaker Shoes Sneakers For Men  ₹3,499\n",
       "96         Elevarse                       SOLFER PLUS Sneakers For Men    ₹299\n",
       "97           BRUTON  Future-04 casual shoes for men | Latest Stylis...    ₹581\n",
       "98          edisson      Modern Trendy Sneakers Shoes Sneakers For Men  ₹1,374\n",
       "99  U.S. POLO ASSN.         Stylish Comfortable shoes Sneakers For Men    ₹489\n",
       "\n",
       "[100 rows x 3 columns]"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.iloc[0:100,:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f6bba6a",
   "metadata": {},
   "source": [
    "QUESTION-7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "cc216597",
   "metadata": {},
   "outputs": [],
   "source": [
    "driver.get('https://www.amazon.in/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "8ffaba4a",
   "metadata": {},
   "outputs": [
    {
     "ename": "ElementNotInteractableException",
     "evalue": "Message: element not interactable\n  (Session info: chrome=108.0.5359.124)\nStacktrace:\n0   chromedriver                        0x000000010e6f8f38 chromedriver + 4910904\n1   chromedriver                        0x000000010e678a03 chromedriver + 4385283\n2   chromedriver                        0x000000010e2bd5bd chromedriver + 472509\n3   chromedriver                        0x000000010e2fa54c chromedriver + 722252\n4   chromedriver                        0x000000010e2f9bb7 chromedriver + 719799\n5   chromedriver                        0x000000010e328112 chromedriver + 909586\n6   chromedriver                        0x000000010e2f40ed chromedriver + 696557\n7   chromedriver                        0x000000010e3282ce chromedriver + 910030\n8   chromedriver                        0x000000010e34328e chromedriver + 1020558\n9   chromedriver                        0x000000010e327ee3 chromedriver + 909027\n10  chromedriver                        0x000000010e2f230c chromedriver + 688908\n11  chromedriver                        0x000000010e2f388e chromedriver + 694414\n12  chromedriver                        0x000000010e6c61de chromedriver + 4702686\n13  chromedriver                        0x000000010e6cab19 chromedriver + 4721433\n14  chromedriver                        0x000000010e6d228e chromedriver + 4752014\n15  chromedriver                        0x000000010e6cb91a chromedriver + 4725018\n16  chromedriver                        0x000000010e69fb02 chromedriver + 4545282\n17  chromedriver                        0x000000010e6ea888 chromedriver + 4851848\n18  chromedriver                        0x000000010e6eaa05 chromedriver + 4852229\n19  chromedriver                        0x000000010e700e5f chromedriver + 4943455\n20  libsystem_pthread.dylib             0x00007fff6e5642eb _pthread_body + 126\n21  libsystem_pthread.dylib             0x00007fff6e567249 _pthread_start + 66\n22  libsystem_pthread.dylib             0x00007fff6e56340d thread_start + 13\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mElementNotInteractableException\u001b[0m           Traceback (most recent call last)",
      "Input \u001b[0;32mIn [123]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m product\u001b[38;5;241m=\u001b[39mdriver\u001b[38;5;241m.\u001b[39mfind_element(By\u001b[38;5;241m.\u001b[39mCLASS_NAME,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnav-search-field\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m----> 2\u001b[0m \u001b[43mproduct\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_keys\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mLaptop\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:233\u001b[0m, in \u001b[0;36mWebElement.send_keys\u001b[0;34m(self, *value)\u001b[0m\n\u001b[1;32m    230\u001b[0m             remote_files\u001b[38;5;241m.\u001b[39mappend(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_upload(file))\n\u001b[1;32m    231\u001b[0m         value \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mjoin(remote_files)\n\u001b[0;32m--> 233\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_execute\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    234\u001b[0m \u001b[43m    \u001b[49m\u001b[43mCommand\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mSEND_KEYS_TO_ELEMENT\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m{\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtext\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mjoin\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkeys_to_typing\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mvalue\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mkeys_to_typing\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m)\u001b[49m\u001b[43m}\u001b[49m\n\u001b[1;32m    235\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:410\u001b[0m, in \u001b[0;36mWebElement._execute\u001b[0;34m(self, command, params)\u001b[0m\n\u001b[1;32m    408\u001b[0m     params \u001b[38;5;241m=\u001b[39m {}\n\u001b[1;32m    409\u001b[0m params[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mid\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_id\n\u001b[0;32m--> 410\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_parent\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexecute\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcommand\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparams\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:444\u001b[0m, in \u001b[0;36mWebDriver.execute\u001b[0;34m(self, driver_command, params)\u001b[0m\n\u001b[1;32m    442\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcommand_executor\u001b[38;5;241m.\u001b[39mexecute(driver_command, params)\n\u001b[1;32m    443\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m response:\n\u001b[0;32m--> 444\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43merror_handler\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcheck_response\u001b[49m\u001b[43m(\u001b[49m\u001b[43mresponse\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    445\u001b[0m     response[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_unwrap_value(response\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[1;32m    446\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m response\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:249\u001b[0m, in \u001b[0;36mErrorHandler.check_response\u001b[0;34m(self, response)\u001b[0m\n\u001b[1;32m    247\u001b[0m         alert_text \u001b[38;5;241m=\u001b[39m value[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124malert\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtext\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    248\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m exception_class(message, screen, stacktrace, alert_text)  \u001b[38;5;66;03m# type: ignore[call-arg]  # mypy is not smart enough here\u001b[39;00m\n\u001b[0;32m--> 249\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m exception_class(message, screen, stacktrace)\n",
      "\u001b[0;31mElementNotInteractableException\u001b[0m: Message: element not interactable\n  (Session info: chrome=108.0.5359.124)\nStacktrace:\n0   chromedriver                        0x000000010e6f8f38 chromedriver + 4910904\n1   chromedriver                        0x000000010e678a03 chromedriver + 4385283\n2   chromedriver                        0x000000010e2bd5bd chromedriver + 472509\n3   chromedriver                        0x000000010e2fa54c chromedriver + 722252\n4   chromedriver                        0x000000010e2f9bb7 chromedriver + 719799\n5   chromedriver                        0x000000010e328112 chromedriver + 909586\n6   chromedriver                        0x000000010e2f40ed chromedriver + 696557\n7   chromedriver                        0x000000010e3282ce chromedriver + 910030\n8   chromedriver                        0x000000010e34328e chromedriver + 1020558\n9   chromedriver                        0x000000010e327ee3 chromedriver + 909027\n10  chromedriver                        0x000000010e2f230c chromedriver + 688908\n11  chromedriver                        0x000000010e2f388e chromedriver + 694414\n12  chromedriver                        0x000000010e6c61de chromedriver + 4702686\n13  chromedriver                        0x000000010e6cab19 chromedriver + 4721433\n14  chromedriver                        0x000000010e6d228e chromedriver + 4752014\n15  chromedriver                        0x000000010e6cb91a chromedriver + 4725018\n16  chromedriver                        0x000000010e69fb02 chromedriver + 4545282\n17  chromedriver                        0x000000010e6ea888 chromedriver + 4851848\n18  chromedriver                        0x000000010e6eaa05 chromedriver + 4852229\n19  chromedriver                        0x000000010e700e5f chromedriver + 4943455\n20  libsystem_pthread.dylib             0x00007fff6e5642eb _pthread_body + 126\n21  libsystem_pthread.dylib             0x00007fff6e567249 _pthread_start + 66\n22  libsystem_pthread.dylib             0x00007fff6e56340d thread_start + 13\n"
     ]
    }
   ],
   "source": [
    "product=driver.find_element(By.CLASS_NAME,'nav-search-field')\n",
    "product.send_keys('Laptop')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1bb43d5",
   "metadata": {},
   "source": [
    "ELEMENT NOT EXTRACTABLE EXCEPTION, CANNOT SCRAPE DATA"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1848644a",
   "metadata": {},
   "source": [
    "QUESTION-8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "86c1a076",
   "metadata": {},
   "outputs": [],
   "source": [
    "driver=webdriver.Chrome(r'/Users/muskansureka/Desktop/chromedriver.exe')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "2dcc9ae6",
   "metadata": {},
   "outputs": [],
   "source": [
    "driver.get('https://www.azquotes.com/top_quotes.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "33258095",
   "metadata": {},
   "outputs": [],
   "source": [
    "quote=[]\n",
    "author=[]\n",
    "typeofquote=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "293b0bba",
   "metadata": {},
   "outputs": [],
   "source": [
    "quote_tags=driver.find_elements(By.XPATH,'//a[@class=\"title\"]')\n",
    "for i in quote_tags:\n",
    "    quotes=i.text\n",
    "    quote.append(quotes)\n",
    "time.sleep(5)\n",
    "author_tags=driver.find_elements(By.XPATH,'//div[@class=\"author\"]')\n",
    "for i in author_tags:\n",
    "    authors=i.text\n",
    "    author.append(authors)\n",
    "time.sleep(5)\n",
    "typeofquote_tags=driver.find_elements(By.XPATH,'//div[@class=\"tags\"]')\n",
    "for i in typeofquote_tags:\n",
    "    types=i.text\n",
    "    typeofquote.append(types)\n",
    "time.sleep(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "73c729dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100 100 100\n"
     ]
    }
   ],
   "source": [
    "print(len(quote),len(author),len(typeofquote))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "a9bba1de",
   "metadata": {},
   "outputs": [],
   "source": [
    "start=0\n",
    "end=9\n",
    "for page in range(start,end):\n",
    "    quote_tags=driver.find_elements(By.XPATH,'//a[@class=\"title\"]')\n",
    "    for i in quote_tags:\n",
    "        quote.append(i.text)\n",
    "    next_button=driver.find_element(By.XPATH,'//li[@class=\"next\"]')\n",
    "    next_button.click()\n",
    "    time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "77e2bc12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(quote)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "c705d308",
   "metadata": {},
   "outputs": [],
   "source": [
    "start=0\n",
    "end=9\n",
    "for page in range(start,end):\n",
    "    author_tags=driver.find_elements(By.XPATH,'//div[@class=\"author\"]')\n",
    "    for i in author_tags:\n",
    "        author.append(i.text)\n",
    "    next_button=driver.find_element(By.XPATH,'//li[@class=\"next\"]')\n",
    "    next_button.click()\n",
    "    time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "7235ef99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1100"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(author)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "8e264b9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1=author"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "04bc4cdf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Michael Porter',\n",
       " 'Golda Meir',\n",
       " 'Theodore Roosevelt',\n",
       " 'Nelson Mandela',\n",
       " 'Erma Bombeck',\n",
       " 'John Wooden',\n",
       " 'Albert Einstein',\n",
       " 'Frank Zappa',\n",
       " 'William Faulkner',\n",
       " 'Will Rogers',\n",
       " 'Jimmy Carter',\n",
       " 'Albert Einstein',\n",
       " 'Abraham Lincoln',\n",
       " 'Steven Weinberg',\n",
       " 'Franklin D. Roosevelt',\n",
       " 'Albert Einstein',\n",
       " 'Maya Angelou',\n",
       " 'Mark Twain',\n",
       " 'Theodore Roosevelt',\n",
       " 'Michael Jackson',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'C. S. Lewis',\n",
       " 'Theodore Roosevelt',\n",
       " 'Mark Twain',\n",
       " 'Abraham Lincoln',\n",
       " 'Ruth Graham',\n",
       " 'C. S. Lewis',\n",
       " 'Groucho Marx',\n",
       " 'John Lennon',\n",
       " 'Barbara Bush',\n",
       " 'Albert Einstein',\n",
       " 'Francis Chan',\n",
       " 'Henry Ford',\n",
       " 'Victor Hugo',\n",
       " 'Abu Bakr',\n",
       " 'Zig Ziglar',\n",
       " 'Winston Churchill',\n",
       " 'Zig Ziglar',\n",
       " 'John F. Kennedy',\n",
       " 'Dwight D. Eisenhower',\n",
       " 'Winston Churchill',\n",
       " 'Albert Einstein',\n",
       " 'Willie Nelson',\n",
       " 'Johnny Cash',\n",
       " 'Marie Curie',\n",
       " 'Maya Angelou',\n",
       " 'Amy Bloom',\n",
       " 'Zig Ziglar',\n",
       " 'John Lennon',\n",
       " 'Thomas Sowell',\n",
       " 'Max Lucado',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Salma Hayek',\n",
       " 'Thomas Sowell',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Douglas MacArthur',\n",
       " 'Douglas MacArthur',\n",
       " 'George S. Patton',\n",
       " 'Corrie Ten Boom',\n",
       " 'Jim Courier',\n",
       " 'Zig Ziglar',\n",
       " 'Edgar Allan Poe',\n",
       " 'Zig Ziglar',\n",
       " 'Stephen Covey',\n",
       " 'Pablo Neruda',\n",
       " 'Joe Frazier',\n",
       " 'Bill Cosby',\n",
       " 'Lewis Grizzard',\n",
       " 'Les Brown',\n",
       " 'Meister Eckhart',\n",
       " 'Muhammad Ali',\n",
       " 'John C. Maxwell',\n",
       " 'Thomas A. Edison',\n",
       " 'Neil Armstrong',\n",
       " 'Rose Kennedy',\n",
       " 'Martin Luther',\n",
       " 'Ronald Reagan',\n",
       " 'Andrew Murray',\n",
       " 'Arianna Huffington',\n",
       " 'Anne Frank',\n",
       " 'Corrie Ten Boom',\n",
       " 'Robin Williams',\n",
       " 'Nelson Mandela',\n",
       " 'Walt Disney',\n",
       " 'John F. Kennedy',\n",
       " 'Mark Twain',\n",
       " 'John Stott',\n",
       " 'Wayne Dyer',\n",
       " 'Steve Jobs',\n",
       " 'Maya Angelou',\n",
       " 'Satchel Paige',\n",
       " 'Mwai Kibaki',\n",
       " 'Roald Dahl',\n",
       " 'Robert H. Schuller',\n",
       " 'Bill Vaughan',\n",
       " 'Hunter S. Thompson',\n",
       " 'Corrie Ten Boom',\n",
       " 'Dalai Lama',\n",
       " 'Mother Teresa',\n",
       " 'Norman Vincent Peale',\n",
       " 'Amelia Earhart',\n",
       " 'Ludwig von Mises',\n",
       " 'Elizabeth Cady Stanton',\n",
       " 'Benjamin Spock',\n",
       " 'Charles Kettering',\n",
       " 'Michael Jordan',\n",
       " 'B.K.S. Iyengar',\n",
       " 'Michael Caine',\n",
       " 'Billy Graham',\n",
       " 'Jim Rohn',\n",
       " 'William Arthur Ward',\n",
       " 'Thomas A. Edison',\n",
       " 'Michael Chang',\n",
       " 'George Mason',\n",
       " 'Thomas Merton',\n",
       " 'Jim Rohn',\n",
       " 'Leo Buscaglia',\n",
       " 'Richard Harding Davis',\n",
       " 'Benjamin Franklin',\n",
       " 'Bob Marley',\n",
       " 'Friedrich Nietzsche',\n",
       " 'Larry Eisenberg',\n",
       " 'Robert A. Heinlein',\n",
       " 'Pablo Picasso',\n",
       " 'George A. Sheehan',\n",
       " 'Confucius',\n",
       " 'William Ellery Channing',\n",
       " 'William Arthur Ward',\n",
       " 'Helen Hayes',\n",
       " 'Robert W. Service',\n",
       " 'Bruce Lee',\n",
       " 'Henry Wadsworth Longfellow',\n",
       " 'Voltaire',\n",
       " 'Lewis Carroll',\n",
       " 'Miles Davis',\n",
       " 'Jim Morrison',\n",
       " 'Mark Twain',\n",
       " 'Malcolm Forbes',\n",
       " 'Eckhart Tolle',\n",
       " 'Albert Einstein',\n",
       " 'Robert E. Cushman, Jr.',\n",
       " 'Flip Wilson',\n",
       " 'Claude Bernard',\n",
       " 'Franklin D. Roosevelt',\n",
       " 'Plato',\n",
       " 'Maya Angelou',\n",
       " 'Vince Lombardi',\n",
       " 'Willie Nelson',\n",
       " 'Mario',\n",
       " 'George Washington Carver',\n",
       " 'Rabindranath Tagore',\n",
       " 'Mother Teresa',\n",
       " 'Jim Rohn',\n",
       " 'Tony Robbins',\n",
       " 'Norman Vincent Peale',\n",
       " 'Franklin D. Roosevelt',\n",
       " 'Steve Jobs',\n",
       " 'Norman Vincent Peale',\n",
       " 'Winston Churchill',\n",
       " 'John Burroughs',\n",
       " 'Albert Einstein',\n",
       " 'Edward R. Murrow',\n",
       " 'Sam Walton',\n",
       " 'R. Buckminster Fuller',\n",
       " 'Loretta Young',\n",
       " 'Marvin Minsky',\n",
       " 'Nancy Lopez',\n",
       " 'Jesse Owens',\n",
       " 'Jane Austen',\n",
       " 'Al Neuharth',\n",
       " 'Lillian Hellman',\n",
       " 'Nhat Hanh',\n",
       " 'Daniel J. Boorstin',\n",
       " 'Judy Garland',\n",
       " 'Og Mandino',\n",
       " 'John Bingham',\n",
       " 'William James',\n",
       " 'Albert Einstein',\n",
       " 'John Dewey',\n",
       " 'Desmond Tutu',\n",
       " 'Rita Mae Brown',\n",
       " 'Margaret Thatcher',\n",
       " 'Eckhart Tolle',\n",
       " 'Ayn Rand',\n",
       " 'Calvin Coolidge',\n",
       " 'Rumi',\n",
       " 'Leo Buscaglia',\n",
       " 'Mark Twain',\n",
       " 'Friedrich Nietzsche',\n",
       " 'Giorgio Armani',\n",
       " 'Aesop',\n",
       " 'Jane Austen',\n",
       " 'Samuel Johnson',\n",
       " 'John C. Maxwell',\n",
       " 'Elie Wiesel',\n",
       " 'Sydney J. Harris',\n",
       " 'Hunter S. Thompson',\n",
       " 'Jim Rohn',\n",
       " 'Ram Dass',\n",
       " 'Plutarch',\n",
       " 'Michael Porter',\n",
       " 'Golda Meir',\n",
       " 'Theodore Roosevelt',\n",
       " 'Nelson Mandela',\n",
       " 'Erma Bombeck',\n",
       " 'John Wooden',\n",
       " 'Albert Einstein',\n",
       " 'Frank Zappa',\n",
       " 'William Faulkner',\n",
       " 'Will Rogers',\n",
       " 'Jimmy Carter',\n",
       " 'Albert Einstein',\n",
       " 'Abraham Lincoln',\n",
       " 'Steven Weinberg',\n",
       " 'Franklin D. Roosevelt',\n",
       " 'Albert Einstein',\n",
       " 'Maya Angelou',\n",
       " 'Mark Twain',\n",
       " 'Theodore Roosevelt',\n",
       " 'Michael Jackson',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'C. S. Lewis',\n",
       " 'Theodore Roosevelt',\n",
       " 'Mark Twain',\n",
       " 'Abraham Lincoln',\n",
       " 'Ruth Graham',\n",
       " 'C. S. Lewis',\n",
       " 'Groucho Marx',\n",
       " 'John Lennon',\n",
       " 'Barbara Bush',\n",
       " 'Albert Einstein',\n",
       " 'Francis Chan',\n",
       " 'Henry Ford',\n",
       " 'Victor Hugo',\n",
       " 'Abu Bakr',\n",
       " 'Zig Ziglar',\n",
       " 'Winston Churchill',\n",
       " 'Zig Ziglar',\n",
       " 'John F. Kennedy',\n",
       " 'Dwight D. Eisenhower',\n",
       " 'Winston Churchill',\n",
       " 'Albert Einstein',\n",
       " 'Willie Nelson',\n",
       " 'Johnny Cash',\n",
       " 'Marie Curie',\n",
       " 'Maya Angelou',\n",
       " 'Amy Bloom',\n",
       " 'Zig Ziglar',\n",
       " 'John Lennon',\n",
       " 'Thomas Sowell',\n",
       " 'Max Lucado',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Salma Hayek',\n",
       " 'Thomas Sowell',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Douglas MacArthur',\n",
       " 'Douglas MacArthur',\n",
       " 'George S. Patton',\n",
       " 'Corrie Ten Boom',\n",
       " 'Jim Courier',\n",
       " 'Zig Ziglar',\n",
       " 'Edgar Allan Poe',\n",
       " 'Zig Ziglar',\n",
       " 'Stephen Covey',\n",
       " 'Pablo Neruda',\n",
       " 'Joe Frazier',\n",
       " 'Bill Cosby',\n",
       " 'Lewis Grizzard',\n",
       " 'Les Brown',\n",
       " 'Meister Eckhart',\n",
       " 'Muhammad Ali',\n",
       " 'John C. Maxwell',\n",
       " 'Thomas A. Edison',\n",
       " 'Neil Armstrong',\n",
       " 'Rose Kennedy',\n",
       " 'Martin Luther',\n",
       " 'Ronald Reagan',\n",
       " 'Andrew Murray',\n",
       " 'Arianna Huffington',\n",
       " 'Anne Frank',\n",
       " 'Corrie Ten Boom',\n",
       " 'Robin Williams',\n",
       " 'Nelson Mandela',\n",
       " 'Walt Disney',\n",
       " 'John F. Kennedy',\n",
       " 'Mark Twain',\n",
       " 'John Stott',\n",
       " 'Wayne Dyer',\n",
       " 'Steve Jobs',\n",
       " 'Maya Angelou',\n",
       " 'Satchel Paige',\n",
       " 'Mwai Kibaki',\n",
       " 'Roald Dahl',\n",
       " 'Robert H. Schuller',\n",
       " 'Bill Vaughan',\n",
       " 'Hunter S. Thompson',\n",
       " 'Corrie Ten Boom',\n",
       " 'Dalai Lama',\n",
       " 'Mother Teresa',\n",
       " 'Norman Vincent Peale',\n",
       " 'Neltje Blanchan',\n",
       " 'Henry Ford',\n",
       " 'Saint Augustine',\n",
       " 'Arthur Rubinstein',\n",
       " 'George Mason',\n",
       " 'Margaret Fuller',\n",
       " 'Colin Powell',\n",
       " 'Benjamin Franklin',\n",
       " 'Elizabeth Kenny',\n",
       " 'Jonathan Edwards',\n",
       " 'Xunzi',\n",
       " 'Bertrand Russell',\n",
       " 'Richard Branson',\n",
       " 'Albert Einstein',\n",
       " 'Jerry Bridges',\n",
       " 'Walt Disney',\n",
       " 'Frederick Douglass',\n",
       " 'J. R. R. Tolkien',\n",
       " 'David Frost',\n",
       " 'Winston Churchill',\n",
       " 'Rush Limbaugh',\n",
       " 'Colin Powell',\n",
       " 'Maya Angelou',\n",
       " 'Mother Teresa',\n",
       " 'Jenn Proske',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Mother Teresa',\n",
       " 'Ronald Reagan',\n",
       " 'Milton Friedman',\n",
       " 'Confucius',\n",
       " 'Nicholas Sparks',\n",
       " 'Victor Hugo',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Mother Teresa',\n",
       " 'Dean Karnazes',\n",
       " 'Dalai Lama',\n",
       " 'Oprah Winfrey',\n",
       " 'Mary Kay Ash',\n",
       " 'C. S. Lewis',\n",
       " 'Nathan Hale',\n",
       " 'Vince Lombardi',\n",
       " 'Maya Angelou',\n",
       " 'Charles Spurgeon',\n",
       " 'Dalai Lama',\n",
       " 'Eleanor Roosevelt',\n",
       " 'Henry Ford',\n",
       " 'George Bernard Shaw',\n",
       " 'Ronald Reagan',\n",
       " 'John F. Kennedy',\n",
       " 'Corrie Ten Boom',\n",
       " 'Brian Tracy',\n",
       " 'George Bernard Shaw',\n",
       " 'David Brinkley',\n",
       " 'Thomas A. Edison',\n",
       " 'Carol Burnett',\n",
       " 'Johann Wolfgang von Goethe',\n",
       " 'Douglas MacArthur',\n",
       " 'Oprah Winfrey',\n",
       " 'Robert Kiyosaki',\n",
       " 'Mark Twain',\n",
       " 'Robert Louis Stevenson',\n",
       " 'Maya Angelou',\n",
       " 'Marilyn vos Savant',\n",
       " 'Alice Walker',\n",
       " 'Bill Gates',\n",
       " 'Mother Teresa',\n",
       " 'Albert Einstein',\n",
       " 'Ronald Reagan',\n",
       " 'John Wooden',\n",
       " 'C. S. Lewis',\n",
       " 'Conrad Hall',\n",
       " 'Walt Disney',\n",
       " 'Michel Odent',\n",
       " 'Oscar Wilde',\n",
       " 'Napoleon Hill',\n",
       " 'Mother Teresa',\n",
       " 'Robin Williams',\n",
       " 'Thomas A. Edison',\n",
       " 'Agatha Christie',\n",
       " 'Diane von Furstenberg',\n",
       " 'Dale Carnegie',\n",
       " 'John Quincy Adams',\n",
       " 'W. E. B. Du Bois',\n",
       " 'Mary Lou Retton',\n",
       " 'Jimmy Carter',\n",
       " 'George Bernard Shaw',\n",
       " 'Helen Keller',\n",
       " 'Robert H. Schuller',\n",
       " 'Gail Devers',\n",
       " 'Diane Sawyer',\n",
       " 'Martin Luther',\n",
       " 'Margaret Thatcher',\n",
       " 'Maya Angelou',\n",
       " 'Albert Schweitzer',\n",
       " 'Jim Rohn',\n",
       " 'Alexander Graham Bell',\n",
       " 'Henry Ford',\n",
       " 'Robin Williams',\n",
       " 'Margaret Walker',\n",
       " 'T. Harv Eker',\n",
       " 'Winston Churchill',\n",
       " 'John Lubbock',\n",
       " 'Albert Einstein',\n",
       " 'Jim Valvano',\n",
       " 'Thomas Jefferson',\n",
       " 'Farrah Gray',\n",
       " 'Mother Teresa',\n",
       " 'Maya Angelou',\n",
       " 'B. F. Skinner',\n",
       " 'Earl Nightingale',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Walt Disney',\n",
       " 'Albert Einstein',\n",
       " 'Bill Gates',\n",
       " 'Henry Ford',\n",
       " 'Albert Einstein',\n",
       " 'Eleanor Roosevelt',\n",
       " 'Babe Ruth',\n",
       " 'Wayne Dyer',\n",
       " 'Stephen King',\n",
       " 'Nelson Mandela',\n",
       " 'Ronald Reagan',\n",
       " 'Benjamin Disraeli',\n",
       " 'Walt Disney',\n",
       " 'Caroline Myss',\n",
       " 'Mother Teresa',\n",
       " 'Marcus Aurelius',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Donna Karan',\n",
       " 'Robin Williams',\n",
       " 'Booker T. Washington',\n",
       " 'Washington Irving',\n",
       " 'Brooke Shields',\n",
       " 'Benjamin Franklin',\n",
       " 'Princess Diana',\n",
       " 'Alexander Graham Bell',\n",
       " 'Anne Frank',\n",
       " 'Johnny Cash',\n",
       " 'Lyndon B. Johnson',\n",
       " 'Confucius',\n",
       " 'Les Brown',\n",
       " 'Warren G. Bennis',\n",
       " 'Dale Carnegie',\n",
       " 'Johnny Cash',\n",
       " 'Helen Keller',\n",
       " 'Walter Hagen',\n",
       " 'Dolly Parton',\n",
       " 'George S. Patton',\n",
       " 'Jim Rohn',\n",
       " 'William Arthur Ward',\n",
       " 'Winston Churchill',\n",
       " 'Groucho Marx',\n",
       " 'Ralph Waldo Emerson',\n",
       " 'Alice Walker',\n",
       " 'Dalai Lama',\n",
       " 'Barbara Sher',\n",
       " 'Wayne Dyer',\n",
       " 'Mother Teresa',\n",
       " 'Drake',\n",
       " 'Marilyn Monroe',\n",
       " 'A. A. Milne',\n",
       " 'Vince Lombardi',\n",
       " 'Ralph Waldo Emerson',\n",
       " 'Jim Rohn',\n",
       " 'Mother Teresa',\n",
       " 'Beverly Sills',\n",
       " 'Billy Graham',\n",
       " 'Ann Landers',\n",
       " 'Dwight D. Eisenhower',\n",
       " 'Stevie Wonder',\n",
       " 'Gillian Anderson',\n",
       " 'Leo Buscaglia',\n",
       " 'Jim Rohn',\n",
       " 'William Halsey',\n",
       " 'Benjamin Franklin',\n",
       " 'Henry David Thoreau',\n",
       " 'Mahatma Gandhi',\n",
       " 'Brian Tracy',\n",
       " 'Mae Jemison',\n",
       " 'Confucius',\n",
       " 'Anne Baxter',\n",
       " 'Ken Venturi',\n",
       " 'George Bernard Shaw',\n",
       " 'C. S. Lewis',\n",
       " 'Abraham Lincoln',\n",
       " 'Ronald Reagan',\n",
       " 'Bill Cosby',\n",
       " 'Eckhart Tolle',\n",
       " 'T. S. Eliot',\n",
       " 'Maxwell Maltz',\n",
       " 'Drew Houston',\n",
       " 'Nido R Qubein',\n",
       " 'Jim Rohn',\n",
       " 'Mahatma Gandhi',\n",
       " 'Mary Pickford',\n",
       " 'Sam Levenson',\n",
       " 'Orison Swett Marden',\n",
       " 'Jon Stewart',\n",
       " 'Malcolm X',\n",
       " 'Edith Head',\n",
       " 'Lucille Ball',\n",
       " 'Abraham Lincoln',\n",
       " 'Albert Schweitzer',\n",
       " 'Napoleon Hill',\n",
       " 'Norman Vincent Peale',\n",
       " 'Tony Robbins',\n",
       " 'Ronald Reagan',\n",
       " 'Mary Tyler Moore',\n",
       " 'Anne Sweeney',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Mother Teresa',\n",
       " 'Jim Rohn',\n",
       " 'Carol Burnett',\n",
       " 'Bear Bryant',\n",
       " 'Audrey Hepburn',\n",
       " 'Satchel Paige',\n",
       " 'H. G. Wells',\n",
       " 'Charles Spurgeon',\n",
       " 'Denis Waitley',\n",
       " 'Denis Waitley',\n",
       " 'E. M. Forster',\n",
       " 'Oliver Wendell Holmes, Jr.',\n",
       " 'Theodore Hesburgh',\n",
       " 'Napoleon Hill',\n",
       " 'Martin Luther',\n",
       " 'Jim Rohn',\n",
       " 'Marie Curie',\n",
       " 'Bo Jackson',\n",
       " 'Paulo Coelho',\n",
       " 'Nelson Mandela',\n",
       " 'Confucius',\n",
       " 'Joseph Campbell',\n",
       " 'Napoleon Bonaparte',\n",
       " 'Rosalynn Carter',\n",
       " 'Lydia M. Child',\n",
       " 'Richard Branson',\n",
       " 'Oscar Wilde',\n",
       " 'Pablo Picasso',\n",
       " 'Geezer Butler',\n",
       " 'E. M. Forster',\n",
       " 'Denis Waitley',\n",
       " 'Abraham Lincoln',\n",
       " 'Henry David Thoreau',\n",
       " 'Byron Katie',\n",
       " 'Sam Ewing',\n",
       " 'John C. Maxwell',\n",
       " 'Earl Nightingale',\n",
       " 'Henry Ford',\n",
       " 'Eleanor Roosevelt',\n",
       " 'Ann Landers',\n",
       " 'Robertson Davies',\n",
       " 'Tony Robbins',\n",
       " 'Charles Simmons',\n",
       " 'Brian Tracy',\n",
       " 'Ernest Hemingway',\n",
       " 'Aldous Huxley',\n",
       " 'George Edward Woodberry',\n",
       " 'Winston Churchill',\n",
       " 'Charles C. Krulak',\n",
       " 'Arthur Schopenhauer',\n",
       " 'Mother Teresa',\n",
       " 'Les Brown',\n",
       " 'Andy Rooney',\n",
       " 'Barbara Smith',\n",
       " 'Vince Lombardi',\n",
       " 'Mark Twain',\n",
       " 'Benjamin Disraeli',\n",
       " 'Barack Obama',\n",
       " 'Winston Churchill',\n",
       " 'Johann Wolfgang von Goethe',\n",
       " 'Max Lucado',\n",
       " 'George S. Patton',\n",
       " 'George Washington',\n",
       " 'John Wayne',\n",
       " 'William Morris',\n",
       " 'John J. Pershing',\n",
       " 'John Wooden',\n",
       " 'Nelson Mandela',\n",
       " 'Elbert Hubbard',\n",
       " 'Jimi Hendrix',\n",
       " 'Brian Tracy',\n",
       " 'Louis de Montfort',\n",
       " 'Jon Bon Jovi',\n",
       " 'Sydney J. Harris',\n",
       " 'Calvin Coolidge',\n",
       " 'Robert Kiyosaki',\n",
       " 'Oscar Wilde',\n",
       " 'Corrie Ten Boom',\n",
       " 'Louisa May Alcott',\n",
       " 'Christopher Morley',\n",
       " 'Norman Schwarzkopf',\n",
       " 'Thomas A. Edison',\n",
       " 'Dorothy Thompson',\n",
       " 'Steve Jobs',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Leo Buscaglia',\n",
       " 'Aristotle',\n",
       " 'Jack Welch',\n",
       " 'Plutarch',\n",
       " 'Jim Rohn',\n",
       " 'Carl Rogers',\n",
       " 'Princess Diana',\n",
       " 'John D. Rockefeller',\n",
       " 'Abraham Lincoln',\n",
       " 'Erica Jong',\n",
       " 'Helen Keller',\n",
       " 'Barbara Corcoran',\n",
       " 'Charles Spurgeon',\n",
       " 'William Arthur Ward',\n",
       " 'Doug Larson',\n",
       " 'Dale Carnegie',\n",
       " 'Erich Fromm',\n",
       " 'Elbert Hubbard',\n",
       " 'Denis Leary',\n",
       " 'Mother Teresa',\n",
       " 'Oprah Winfrey',\n",
       " 'Albert Einstein',\n",
       " 'Sydney J. Harris',\n",
       " 'Bruce Lee',\n",
       " 'Henry Ford',\n",
       " 'William Tecumseh Sherman',\n",
       " 'Winston Churchill',\n",
       " 'Nelson Mandela',\n",
       " 'Henry Ford',\n",
       " 'Jim Rohn',\n",
       " 'Benjamin Franklin',\n",
       " 'Jim Rohn',\n",
       " 'Les Brown',\n",
       " 'Wayne Dyer',\n",
       " 'Jimi Hendrix',\n",
       " 'Alphonse de Lamartine',\n",
       " 'Omar N. Bradley',\n",
       " 'Confucius',\n",
       " 'Steve Jobs',\n",
       " 'Harriet Beecher Stowe',\n",
       " 'Roald Dahl',\n",
       " 'Corrie Ten Boom',\n",
       " 'Ellen Glasgow',\n",
       " 'Will Rogers',\n",
       " 'Marilyn Monroe',\n",
       " 'Hermann Hesse',\n",
       " 'Emile Zola',\n",
       " 'Julie Isphording',\n",
       " 'Zig Ziglar',\n",
       " 'Eleanor Roosevelt',\n",
       " 'William Jennings Bryan',\n",
       " 'Michel de Montaigne',\n",
       " 'Mother Teresa',\n",
       " 'Mark Twain',\n",
       " 'Booker T. Washington',\n",
       " 'Chuck Palahniuk',\n",
       " 'Edgar Allan Poe',\n",
       " 'John Wooden',\n",
       " 'Edmund Burke',\n",
       " 'Daniel J. Boorstin',\n",
       " 'William Penn',\n",
       " 'Lee Iacocca',\n",
       " 'Albert Einstein',\n",
       " 'Abu Bakr',\n",
       " 'Dr. Seuss',\n",
       " 'Euripides',\n",
       " 'Jim Rohn',\n",
       " 'Wayne Dyer',\n",
       " 'Nelson Mandela',\n",
       " 'Jean de La Fontaine',\n",
       " 'William Arthur Ward',\n",
       " 'Margaret Fuller',\n",
       " 'Mark Twain',\n",
       " 'Walt Disney',\n",
       " 'Charles Kettering',\n",
       " 'Richard DeVos',\n",
       " 'Marcus Aurelius',\n",
       " 'Robert Fulghum',\n",
       " 'Milton Berle',\n",
       " 'Jim Rohn',\n",
       " 'Abraham Lincoln',\n",
       " 'Denis Waitley',\n",
       " 'Virginia Woolf',\n",
       " 'Tom Krause',\n",
       " 'Abdul Kalam',\n",
       " 'Edward Eggleston',\n",
       " 'Albert Einstein',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Gilda Radner',\n",
       " 'Jim Rohn',\n",
       " 'Frederick Buechner',\n",
       " 'Colin Powell',\n",
       " 'Wilma Rudolph',\n",
       " 'Albert Einstein',\n",
       " 'Lou Holtz',\n",
       " 'Goran Persson',\n",
       " 'Will Smith',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Barbara Bush',\n",
       " 'Rose Kennedy',\n",
       " 'John F. Kennedy',\n",
       " 'Michael Landon',\n",
       " 'Henry David Thoreau',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Ayn Rand',\n",
       " 'William Shakespeare',\n",
       " 'F. Burton Howard',\n",
       " 'Woody Allen',\n",
       " 'Christopher Reeve',\n",
       " 'Sydney J. Harris',\n",
       " 'Denis Waitley',\n",
       " 'Tom Brokaw',\n",
       " 'Bruce Lee',\n",
       " 'Jack Dixon',\n",
       " 'Pearl S. Buck',\n",
       " 'William Carey',\n",
       " 'John C. Maxwell',\n",
       " 'Albert Einstein',\n",
       " 'Nicholas Sparks',\n",
       " 'Joseph Campbell',\n",
       " 'Harry Emerson Fosdick',\n",
       " 'Steve Jobs',\n",
       " 'Golda Meir',\n",
       " 'Dwight L. Moody',\n",
       " 'Bill Gates',\n",
       " 'Winston Churchill',\n",
       " 'Soren Kierkegaard',\n",
       " 'Lois Wyse',\n",
       " 'Ambrose Bierce',\n",
       " 'Aristotle',\n",
       " 'Dwight D. Eisenhower',\n",
       " 'Ernest Hemingway',\n",
       " 'Arthur Schopenhauer',\n",
       " 'Golda Meir',\n",
       " 'Joy Page',\n",
       " 'Stephen Covey',\n",
       " 'Lucille Ball',\n",
       " 'John Wooden',\n",
       " 'Napoleon Hill',\n",
       " 'Adrienne Rich',\n",
       " 'Babe Ruth',\n",
       " 'Marcus Tullius Cicero',\n",
       " 'Will Rogers',\n",
       " 'Benjamin Franklin',\n",
       " 'Pat Riley',\n",
       " 'Nora Ephron',\n",
       " 'Anne Frank',\n",
       " 'Peter Drucker',\n",
       " 'Morris West',\n",
       " 'Haim Ginott',\n",
       " 'Helen Keller',\n",
       " 'Arthur Ashe',\n",
       " 'Zig Ziglar',\n",
       " 'Winston Churchill',\n",
       " 'Gerry Spence',\n",
       " 'Joyce Brothers',\n",
       " 'Jim Rohn',\n",
       " 'Abraham Lincoln',\n",
       " 'Princess Diana',\n",
       " 'Viktor E. Frankl',\n",
       " 'Frances Hodgson Burnett',\n",
       " 'Bruce Lee',\n",
       " 'Marian Wright Edelman',\n",
       " 'Chief Seattle',\n",
       " 'Dave Barry',\n",
       " 'Florence Nightingale',\n",
       " 'Jim Rohn',\n",
       " 'Thomas Paine',\n",
       " 'Clint Eastwood',\n",
       " 'Rosa Parks',\n",
       " 'B. B. King',\n",
       " 'Pablo Picasso',\n",
       " 'Helen Keller',\n",
       " 'Sheryl Sandberg',\n",
       " 'Zig Ziglar',\n",
       " 'Byron Katie',\n",
       " 'Eleanor Roosevelt',\n",
       " 'Melody Beattie',\n",
       " 'Betty Friedan',\n",
       " 'William Arthur Ward',\n",
       " 'Theodore Roosevelt',\n",
       " 'Jackie Joyner-Kersee',\n",
       " 'Vince Lombardi',\n",
       " 'Muhammad Ali',\n",
       " 'Horace Greeley',\n",
       " 'Bob Marley',\n",
       " 'Ernest Hemingway',\n",
       " 'Brian Tracy',\n",
       " 'Mary Kay Ash',\n",
       " 'Paul Valery',\n",
       " 'Irving Berlin',\n",
       " 'Bono',\n",
       " 'Peter Marshall',\n",
       " 'Elizabeth Gilbert',\n",
       " 'Jim Rohn',\n",
       " 'Desmond Tutu',\n",
       " 'Ken Keyes Jr.',\n",
       " 'Albert Einstein',\n",
       " 'Elisabeth Kubler-Ross',\n",
       " 'Tony Robbins',\n",
       " 'Stephen Covey',\n",
       " 'John Wooden',\n",
       " 'Erica Jong',\n",
       " 'Thomas Szasz',\n",
       " 'William James',\n",
       " 'John Barrymore',\n",
       " 'Joseph Joubert',\n",
       " 'Susan Sarandon',\n",
       " 'Voltaire',\n",
       " 'Jim Rohn',\n",
       " 'Barbara Johnson',\n",
       " 'John F. Kennedy',\n",
       " 'Lawrence Block',\n",
       " 'Frederick Douglass',\n",
       " 'Lucy Maud Montgomery',\n",
       " 'Albert Camus',\n",
       " 'Mike Singletary',\n",
       " 'John Bingham',\n",
       " 'Honore de Balzac',\n",
       " 'Burton Hill',\n",
       " 'Deepak Chopra',\n",
       " 'Barbara De Angelis',\n",
       " 'Eleanor Roosevelt',\n",
       " 'Vincent Van Gogh',\n",
       " 'Dale Carnegie',\n",
       " 'Mark Twain',\n",
       " 'John Locke',\n",
       " 'Julie Andrews',\n",
       " 'Guy Finley',\n",
       " 'Harper Lee',\n",
       " 'M. Scott Peck',\n",
       " 'Rumi',\n",
       " 'Plato',\n",
       " 'Billy Graham',\n",
       " 'Mary Kay Ash',\n",
       " 'Leo Buscaglia',\n",
       " 'Tony Robbins',\n",
       " 'Alfred Lord Tennyson',\n",
       " 'Margaret Mead',\n",
       " 'Billy Graham',\n",
       " 'Lydia M. Child',\n",
       " 'Ruby Dee',\n",
       " 'Michael Jordan',\n",
       " 'Leo Tolstoy',\n",
       " 'Bill Gates',\n",
       " 'Andrew Carnegie',\n",
       " 'Vern Law',\n",
       " 'Anais Nin',\n",
       " 'Jim Rohn',\n",
       " 'Albert Camus',\n",
       " 'Confucius',\n",
       " 'Warren Buffett',\n",
       " 'Richard Lamm',\n",
       " 'Stephen Covey',\n",
       " 'Louis de Montfort',\n",
       " 'Gloria Steinem',\n",
       " 'Christian Dior',\n",
       " 'Winston Churchill',\n",
       " 'Wayne Dyer',\n",
       " 'James Madison',\n",
       " 'Stephen Hawking',\n",
       " 'Joseph Campbell',\n",
       " 'Heath Ledger',\n",
       " 'Jim Rohn',\n",
       " 'Jim Rohn',\n",
       " 'Alan Cohen',\n",
       " 'Orison Swett Marden',\n",
       " 'Billy Graham',\n",
       " 'Ralph Waldo Emerson',\n",
       " 'John Muir',\n",
       " 'James Allen',\n",
       " 'Leonardo da Vinci',\n",
       " 'Tony Robbins',\n",
       " 'Malcolm Forbes',\n",
       " 'Tim Ferriss',\n",
       " 'Jacqueline Gareau',\n",
       " 'Joseph Addison',\n",
       " 'Benjamin Jowett',\n",
       " 'Jim Rohn',\n",
       " 'Robert Collier',\n",
       " 'Charles Buxton',\n",
       " 'Vernon Howard',\n",
       " 'Vince Lombardi',\n",
       " 'Peace Pilgrim',\n",
       " 'Wilma Rudolph',\n",
       " 'Jim Rohn',\n",
       " 'Haruki Murakami',\n",
       " 'James A. Baldwin',\n",
       " 'James Allen',\n",
       " 'John Green',\n",
       " 'Stephen Hawking',\n",
       " 'Khalil Gibran',\n",
       " 'Jim Rohn',\n",
       " 'Unknown',\n",
       " 'Thomas Huxley',\n",
       " 'Bobby Seale',\n",
       " 'Les Brown',\n",
       " 'John F. Kennedy',\n",
       " 'Andre Gide',\n",
       " 'Kurt Vonnegut',\n",
       " 'Thomas Fuller',\n",
       " 'Theodore Roosevelt',\n",
       " 'Anna Quindlen',\n",
       " 'Wayne Dyer',\n",
       " 'Paul Tournier',\n",
       " 'Bernard Baruch',\n",
       " 'Zig Ziglar',\n",
       " 'Maya Angelou',\n",
       " 'Paulo Coelho',\n",
       " 'Melody Beattie',\n",
       " 'Joseph Campbell',\n",
       " 'Princess Diana',\n",
       " 'Bernard Williams',\n",
       " 'Honore de Balzac',\n",
       " 'Ernest Hemingway',\n",
       " 'Janis Ian',\n",
       " 'Wayne Dyer',\n",
       " 'Ann Landers',\n",
       " 'Goldie Hawn',\n",
       " 'Wayne Dyer',\n",
       " 'Storm Jameson',\n",
       " 'Robin Sharma',\n",
       " 'Ralph Waldo Emerson',\n",
       " 'Abraham Lincoln',\n",
       " 'Ralph Abernathy',\n",
       " 'Robert Frost',\n",
       " 'Norman Vincent Peale',\n",
       " 'Vernon Howard',\n",
       " 'Joe Girard',\n",
       " 'Kurt Vonnegut',\n",
       " 'Francis Bacon',\n",
       " 'Shakti Gawain',\n",
       " 'Jon Bon Jovi',\n",
       " 'Ernest Hemingway',\n",
       " 'Wayne Dyer',\n",
       " 'Tony Robbins',\n",
       " 'Naguib Mahfouz',\n",
       " 'Henry David Thoreau',\n",
       " 'Dale Carnegie',\n",
       " 'Billy Graham',\n",
       " 'Swami Vivekananda',\n",
       " 'Billy Graham',\n",
       " 'James Madison',\n",
       " 'Johnny Depp',\n",
       " 'Alice Walker',\n",
       " 'Ronnie Lott',\n",
       " 'Harvey Fierstein',\n",
       " 'John Ruskin',\n",
       " 'Tyra Banks',\n",
       " 'Unknown',\n",
       " 'Victor Hugo',\n",
       " 'Thomas Jefferson',\n",
       " 'Sam Cawthorn',\n",
       " 'Rumi',\n",
       " 'Anton Chekhov',\n",
       " 'Winston Churchill',\n",
       " 'Helen Keller',\n",
       " 'Kathrine Switzer',\n",
       " 'Arthur Ashe',\n",
       " 'Billy Graham',\n",
       " 'Les Brown',\n",
       " 'Lady Gaga',\n",
       " 'Uta Hagen',\n",
       " 'Dalai Lama',\n",
       " 'John Bunyan',\n",
       " 'Jack LaLanne',\n",
       " 'Stephen King',\n",
       " 'Norman Vincent Peale',\n",
       " 'Milton Friedman',\n",
       " 'Paulo Coelho',\n",
       " 'Edward de Bono',\n",
       " 'Don Herold',\n",
       " 'Wayne Dyer',\n",
       " 'Arthur Rubinstein',\n",
       " 'Johann Wolfgang von Goethe',\n",
       " 'Napoleon Hill',\n",
       " 'Lou Holtz',\n",
       " 'Abraham Lincoln',\n",
       " 'Marcus Aurelius',\n",
       " 'Pope John Paul II',\n",
       " 'Neal A. Maxwell',\n",
       " 'Anne Frank',\n",
       " 'George S. Patton',\n",
       " 'William James',\n",
       " 'Sun Tzu',\n",
       " 'Galileo Galilei',\n",
       " 'Epictetus',\n",
       " 'George S. Patton',\n",
       " 'Thomas Fuller',\n",
       " 'Ray Kroc',\n",
       " 'Christina Rossetti',\n",
       " 'Jim Rohn',\n",
       " 'Arthur Ashe',\n",
       " 'Sylvia Plath',\n",
       " 'James Earl Jones',\n",
       " 'Jim Rohn',\n",
       " 'Mark Twain',\n",
       " 'Og Mandino',\n",
       " 'Malcolm X',\n",
       " 'W. Clement Stone',\n",
       " 'Andy Rooney',\n",
       " 'Rick Warren',\n",
       " 'Abraham Lincoln',\n",
       " 'Thomas Jefferson',\n",
       " 'Tim Allen',\n",
       " ...]"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "532ef951",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Michael Porter',\n",
       " 'Golda Meir',\n",
       " 'Theodore Roosevelt',\n",
       " 'Nelson Mandela',\n",
       " 'Erma Bombeck',\n",
       " 'John Wooden',\n",
       " 'Albert Einstein',\n",
       " 'Frank Zappa',\n",
       " 'William Faulkner',\n",
       " 'Will Rogers',\n",
       " 'Jimmy Carter',\n",
       " 'Albert Einstein',\n",
       " 'Abraham Lincoln',\n",
       " 'Steven Weinberg',\n",
       " 'Franklin D. Roosevelt',\n",
       " 'Albert Einstein',\n",
       " 'Maya Angelou',\n",
       " 'Mark Twain',\n",
       " 'Theodore Roosevelt',\n",
       " 'Michael Jackson',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'C. S. Lewis',\n",
       " 'Theodore Roosevelt',\n",
       " 'Mark Twain',\n",
       " 'Abraham Lincoln',\n",
       " 'Ruth Graham',\n",
       " 'C. S. Lewis',\n",
       " 'Groucho Marx',\n",
       " 'John Lennon',\n",
       " 'Barbara Bush',\n",
       " 'Albert Einstein',\n",
       " 'Francis Chan',\n",
       " 'Henry Ford',\n",
       " 'Victor Hugo',\n",
       " 'Abu Bakr',\n",
       " 'Zig Ziglar',\n",
       " 'Winston Churchill',\n",
       " 'Zig Ziglar',\n",
       " 'John F. Kennedy',\n",
       " 'Dwight D. Eisenhower',\n",
       " 'Winston Churchill',\n",
       " 'Albert Einstein',\n",
       " 'Willie Nelson',\n",
       " 'Johnny Cash',\n",
       " 'Marie Curie',\n",
       " 'Maya Angelou',\n",
       " 'Amy Bloom',\n",
       " 'Zig Ziglar',\n",
       " 'John Lennon',\n",
       " 'Thomas Sowell',\n",
       " 'Max Lucado',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Salma Hayek',\n",
       " 'Thomas Sowell',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Douglas MacArthur',\n",
       " 'Douglas MacArthur',\n",
       " 'George S. Patton',\n",
       " 'Corrie Ten Boom',\n",
       " 'Jim Courier',\n",
       " 'Zig Ziglar',\n",
       " 'Edgar Allan Poe',\n",
       " 'Zig Ziglar',\n",
       " 'Stephen Covey',\n",
       " 'Pablo Neruda',\n",
       " 'Joe Frazier',\n",
       " 'Bill Cosby',\n",
       " 'Lewis Grizzard',\n",
       " 'Les Brown',\n",
       " 'Meister Eckhart',\n",
       " 'Muhammad Ali',\n",
       " 'John C. Maxwell',\n",
       " 'Thomas A. Edison',\n",
       " 'Neil Armstrong',\n",
       " 'Rose Kennedy',\n",
       " 'Martin Luther',\n",
       " 'Ronald Reagan',\n",
       " 'Andrew Murray',\n",
       " 'Arianna Huffington',\n",
       " 'Anne Frank',\n",
       " 'Corrie Ten Boom',\n",
       " 'Robin Williams',\n",
       " 'Nelson Mandela',\n",
       " 'Walt Disney',\n",
       " 'John F. Kennedy',\n",
       " 'Mark Twain',\n",
       " 'John Stott',\n",
       " 'Wayne Dyer',\n",
       " 'Steve Jobs',\n",
       " 'Maya Angelou',\n",
       " 'Satchel Paige',\n",
       " 'Mwai Kibaki',\n",
       " 'Roald Dahl',\n",
       " 'Robert H. Schuller',\n",
       " 'Bill Vaughan',\n",
       " 'Hunter S. Thompson',\n",
       " 'Corrie Ten Boom',\n",
       " 'Dalai Lama',\n",
       " 'Mother Teresa',\n",
       " 'Norman Vincent Peale',\n",
       " 'Amelia Earhart',\n",
       " 'Ludwig von Mises',\n",
       " 'Elizabeth Cady Stanton',\n",
       " 'Benjamin Spock',\n",
       " 'Charles Kettering',\n",
       " 'Michael Jordan',\n",
       " 'B.K.S. Iyengar',\n",
       " 'Michael Caine',\n",
       " 'Billy Graham',\n",
       " 'Jim Rohn',\n",
       " 'William Arthur Ward',\n",
       " 'Thomas A. Edison',\n",
       " 'Michael Chang',\n",
       " 'George Mason',\n",
       " 'Thomas Merton',\n",
       " 'Jim Rohn',\n",
       " 'Leo Buscaglia',\n",
       " 'Richard Harding Davis',\n",
       " 'Benjamin Franklin',\n",
       " 'Bob Marley',\n",
       " 'Friedrich Nietzsche',\n",
       " 'Larry Eisenberg',\n",
       " 'Robert A. Heinlein',\n",
       " 'Pablo Picasso',\n",
       " 'George A. Sheehan',\n",
       " 'Confucius',\n",
       " 'William Ellery Channing',\n",
       " 'William Arthur Ward',\n",
       " 'Helen Hayes',\n",
       " 'Robert W. Service',\n",
       " 'Bruce Lee',\n",
       " 'Henry Wadsworth Longfellow',\n",
       " 'Voltaire',\n",
       " 'Lewis Carroll',\n",
       " 'Miles Davis',\n",
       " 'Jim Morrison',\n",
       " 'Mark Twain',\n",
       " 'Malcolm Forbes',\n",
       " 'Eckhart Tolle',\n",
       " 'Albert Einstein',\n",
       " 'Robert E. Cushman, Jr.',\n",
       " 'Flip Wilson',\n",
       " 'Claude Bernard',\n",
       " 'Franklin D. Roosevelt',\n",
       " 'Plato',\n",
       " 'Maya Angelou',\n",
       " 'Vince Lombardi',\n",
       " 'Willie Nelson',\n",
       " 'Mario',\n",
       " 'George Washington Carver',\n",
       " 'Rabindranath Tagore',\n",
       " 'Mother Teresa',\n",
       " 'Jim Rohn',\n",
       " 'Tony Robbins',\n",
       " 'Norman Vincent Peale',\n",
       " 'Franklin D. Roosevelt',\n",
       " 'Steve Jobs',\n",
       " 'Norman Vincent Peale',\n",
       " 'Winston Churchill',\n",
       " 'John Burroughs',\n",
       " 'Albert Einstein',\n",
       " 'Edward R. Murrow',\n",
       " 'Sam Walton',\n",
       " 'R. Buckminster Fuller',\n",
       " 'Loretta Young',\n",
       " 'Marvin Minsky',\n",
       " 'Nancy Lopez',\n",
       " 'Jesse Owens',\n",
       " 'Jane Austen',\n",
       " 'Al Neuharth',\n",
       " 'Lillian Hellman',\n",
       " 'Nhat Hanh',\n",
       " 'Daniel J. Boorstin',\n",
       " 'Judy Garland',\n",
       " 'Og Mandino',\n",
       " 'John Bingham',\n",
       " 'William James',\n",
       " 'Albert Einstein',\n",
       " 'John Dewey',\n",
       " 'Desmond Tutu',\n",
       " 'Rita Mae Brown',\n",
       " 'Margaret Thatcher',\n",
       " 'Eckhart Tolle',\n",
       " 'Ayn Rand',\n",
       " 'Calvin Coolidge',\n",
       " 'Rumi',\n",
       " 'Leo Buscaglia',\n",
       " 'Mark Twain',\n",
       " 'Friedrich Nietzsche',\n",
       " 'Giorgio Armani',\n",
       " 'Aesop',\n",
       " 'Jane Austen',\n",
       " 'Samuel Johnson',\n",
       " 'John C. Maxwell',\n",
       " 'Elie Wiesel',\n",
       " 'Sydney J. Harris',\n",
       " 'Hunter S. Thompson',\n",
       " 'Jim Rohn',\n",
       " 'Ram Dass',\n",
       " 'Plutarch',\n",
       " 'Michael Porter',\n",
       " 'Golda Meir',\n",
       " 'Theodore Roosevelt',\n",
       " 'Nelson Mandela',\n",
       " 'Erma Bombeck',\n",
       " 'John Wooden',\n",
       " 'Albert Einstein',\n",
       " 'Frank Zappa',\n",
       " 'William Faulkner',\n",
       " 'Will Rogers',\n",
       " 'Jimmy Carter',\n",
       " 'Albert Einstein',\n",
       " 'Abraham Lincoln',\n",
       " 'Steven Weinberg',\n",
       " 'Franklin D. Roosevelt',\n",
       " 'Albert Einstein',\n",
       " 'Maya Angelou',\n",
       " 'Mark Twain',\n",
       " 'Theodore Roosevelt',\n",
       " 'Michael Jackson',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'C. S. Lewis',\n",
       " 'Theodore Roosevelt',\n",
       " 'Mark Twain',\n",
       " 'Abraham Lincoln',\n",
       " 'Ruth Graham',\n",
       " 'C. S. Lewis',\n",
       " 'Groucho Marx',\n",
       " 'John Lennon',\n",
       " 'Barbara Bush',\n",
       " 'Albert Einstein',\n",
       " 'Francis Chan',\n",
       " 'Henry Ford',\n",
       " 'Victor Hugo',\n",
       " 'Abu Bakr',\n",
       " 'Zig Ziglar',\n",
       " 'Winston Churchill',\n",
       " 'Zig Ziglar',\n",
       " 'John F. Kennedy',\n",
       " 'Dwight D. Eisenhower',\n",
       " 'Winston Churchill',\n",
       " 'Albert Einstein',\n",
       " 'Willie Nelson',\n",
       " 'Johnny Cash',\n",
       " 'Marie Curie',\n",
       " 'Maya Angelou',\n",
       " 'Amy Bloom',\n",
       " 'Zig Ziglar',\n",
       " 'John Lennon',\n",
       " 'Thomas Sowell',\n",
       " 'Max Lucado',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Salma Hayek',\n",
       " 'Thomas Sowell',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Douglas MacArthur',\n",
       " 'Douglas MacArthur',\n",
       " 'George S. Patton',\n",
       " 'Corrie Ten Boom',\n",
       " 'Jim Courier',\n",
       " 'Zig Ziglar',\n",
       " 'Edgar Allan Poe',\n",
       " 'Zig Ziglar',\n",
       " 'Stephen Covey',\n",
       " 'Pablo Neruda',\n",
       " 'Joe Frazier',\n",
       " 'Bill Cosby',\n",
       " 'Lewis Grizzard',\n",
       " 'Les Brown',\n",
       " 'Meister Eckhart',\n",
       " 'Muhammad Ali',\n",
       " 'John C. Maxwell',\n",
       " 'Thomas A. Edison',\n",
       " 'Neil Armstrong',\n",
       " 'Rose Kennedy',\n",
       " 'Martin Luther',\n",
       " 'Ronald Reagan',\n",
       " 'Andrew Murray',\n",
       " 'Arianna Huffington',\n",
       " 'Anne Frank',\n",
       " 'Corrie Ten Boom',\n",
       " 'Robin Williams',\n",
       " 'Nelson Mandela',\n",
       " 'Walt Disney',\n",
       " 'John F. Kennedy',\n",
       " 'Mark Twain',\n",
       " 'John Stott',\n",
       " 'Wayne Dyer',\n",
       " 'Steve Jobs',\n",
       " 'Maya Angelou',\n",
       " 'Satchel Paige',\n",
       " 'Mwai Kibaki',\n",
       " 'Roald Dahl',\n",
       " 'Robert H. Schuller',\n",
       " 'Bill Vaughan',\n",
       " 'Hunter S. Thompson',\n",
       " 'Corrie Ten Boom',\n",
       " 'Dalai Lama',\n",
       " 'Mother Teresa',\n",
       " 'Norman Vincent Peale',\n",
       " 'Neltje Blanchan',\n",
       " 'Henry Ford',\n",
       " 'Saint Augustine',\n",
       " 'Arthur Rubinstein',\n",
       " 'George Mason',\n",
       " 'Margaret Fuller',\n",
       " 'Colin Powell',\n",
       " 'Benjamin Franklin',\n",
       " 'Elizabeth Kenny',\n",
       " 'Jonathan Edwards',\n",
       " 'Xunzi',\n",
       " 'Bertrand Russell',\n",
       " 'Richard Branson',\n",
       " 'Albert Einstein',\n",
       " 'Jerry Bridges',\n",
       " 'Walt Disney',\n",
       " 'Frederick Douglass',\n",
       " 'J. R. R. Tolkien',\n",
       " 'David Frost',\n",
       " 'Winston Churchill',\n",
       " 'Rush Limbaugh',\n",
       " 'Colin Powell',\n",
       " 'Maya Angelou',\n",
       " 'Mother Teresa',\n",
       " 'Jenn Proske',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Mother Teresa',\n",
       " 'Ronald Reagan',\n",
       " 'Milton Friedman',\n",
       " 'Confucius',\n",
       " 'Nicholas Sparks',\n",
       " 'Victor Hugo',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Mother Teresa',\n",
       " 'Dean Karnazes',\n",
       " 'Dalai Lama',\n",
       " 'Oprah Winfrey',\n",
       " 'Mary Kay Ash',\n",
       " 'C. S. Lewis',\n",
       " 'Nathan Hale',\n",
       " 'Vince Lombardi',\n",
       " 'Maya Angelou',\n",
       " 'Charles Spurgeon',\n",
       " 'Dalai Lama',\n",
       " 'Eleanor Roosevelt',\n",
       " 'Henry Ford',\n",
       " 'George Bernard Shaw',\n",
       " 'Ronald Reagan',\n",
       " 'John F. Kennedy',\n",
       " 'Corrie Ten Boom',\n",
       " 'Brian Tracy',\n",
       " 'George Bernard Shaw',\n",
       " 'David Brinkley',\n",
       " 'Thomas A. Edison',\n",
       " 'Carol Burnett',\n",
       " 'Johann Wolfgang von Goethe',\n",
       " 'Douglas MacArthur',\n",
       " 'Oprah Winfrey',\n",
       " 'Robert Kiyosaki',\n",
       " 'Mark Twain',\n",
       " 'Robert Louis Stevenson',\n",
       " 'Maya Angelou',\n",
       " 'Marilyn vos Savant',\n",
       " 'Alice Walker',\n",
       " 'Bill Gates',\n",
       " 'Mother Teresa',\n",
       " 'Albert Einstein',\n",
       " 'Ronald Reagan',\n",
       " 'John Wooden',\n",
       " 'C. S. Lewis',\n",
       " 'Conrad Hall',\n",
       " 'Walt Disney',\n",
       " 'Michel Odent',\n",
       " 'Oscar Wilde',\n",
       " 'Napoleon Hill',\n",
       " 'Mother Teresa',\n",
       " 'Robin Williams',\n",
       " 'Thomas A. Edison',\n",
       " 'Agatha Christie',\n",
       " 'Diane von Furstenberg',\n",
       " 'Dale Carnegie',\n",
       " 'John Quincy Adams',\n",
       " 'W. E. B. Du Bois',\n",
       " 'Mary Lou Retton',\n",
       " 'Jimmy Carter',\n",
       " 'George Bernard Shaw',\n",
       " 'Helen Keller',\n",
       " 'Robert H. Schuller',\n",
       " 'Gail Devers',\n",
       " 'Diane Sawyer',\n",
       " 'Martin Luther',\n",
       " 'Margaret Thatcher',\n",
       " 'Maya Angelou',\n",
       " 'Albert Schweitzer',\n",
       " 'Jim Rohn',\n",
       " 'Alexander Graham Bell',\n",
       " 'Henry Ford',\n",
       " 'Robin Williams',\n",
       " 'Margaret Walker',\n",
       " 'T. Harv Eker',\n",
       " 'Winston Churchill',\n",
       " 'John Lubbock',\n",
       " 'Albert Einstein',\n",
       " 'Jim Valvano',\n",
       " 'Thomas Jefferson',\n",
       " 'Farrah Gray',\n",
       " 'Mother Teresa',\n",
       " 'Maya Angelou',\n",
       " 'B. F. Skinner',\n",
       " 'Earl Nightingale',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Walt Disney',\n",
       " 'Albert Einstein',\n",
       " 'Bill Gates',\n",
       " 'Henry Ford',\n",
       " 'Albert Einstein',\n",
       " 'Eleanor Roosevelt',\n",
       " 'Babe Ruth',\n",
       " 'Wayne Dyer',\n",
       " 'Stephen King',\n",
       " 'Nelson Mandela',\n",
       " 'Ronald Reagan',\n",
       " 'Benjamin Disraeli',\n",
       " 'Walt Disney',\n",
       " 'Caroline Myss',\n",
       " 'Mother Teresa',\n",
       " 'Marcus Aurelius',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Donna Karan',\n",
       " 'Robin Williams',\n",
       " 'Booker T. Washington',\n",
       " 'Washington Irving',\n",
       " 'Brooke Shields',\n",
       " 'Benjamin Franklin',\n",
       " 'Princess Diana',\n",
       " 'Alexander Graham Bell',\n",
       " 'Anne Frank',\n",
       " 'Johnny Cash',\n",
       " 'Lyndon B. Johnson',\n",
       " 'Confucius',\n",
       " 'Les Brown',\n",
       " 'Warren G. Bennis',\n",
       " 'Dale Carnegie',\n",
       " 'Johnny Cash',\n",
       " 'Helen Keller',\n",
       " 'Walter Hagen',\n",
       " 'Dolly Parton',\n",
       " 'George S. Patton',\n",
       " 'Jim Rohn',\n",
       " 'William Arthur Ward',\n",
       " 'Winston Churchill',\n",
       " 'Groucho Marx',\n",
       " 'Ralph Waldo Emerson',\n",
       " 'Alice Walker',\n",
       " 'Dalai Lama',\n",
       " 'Barbara Sher',\n",
       " 'Wayne Dyer',\n",
       " 'Mother Teresa',\n",
       " 'Drake',\n",
       " 'Marilyn Monroe',\n",
       " 'A. A. Milne',\n",
       " 'Vince Lombardi',\n",
       " 'Ralph Waldo Emerson',\n",
       " 'Jim Rohn',\n",
       " 'Mother Teresa',\n",
       " 'Beverly Sills',\n",
       " 'Billy Graham',\n",
       " 'Ann Landers',\n",
       " 'Dwight D. Eisenhower',\n",
       " 'Stevie Wonder',\n",
       " 'Gillian Anderson',\n",
       " 'Leo Buscaglia',\n",
       " 'Jim Rohn',\n",
       " 'William Halsey',\n",
       " 'Benjamin Franklin',\n",
       " 'Henry David Thoreau',\n",
       " 'Mahatma Gandhi',\n",
       " 'Brian Tracy',\n",
       " 'Mae Jemison',\n",
       " 'Confucius',\n",
       " 'Anne Baxter',\n",
       " 'Ken Venturi',\n",
       " 'George Bernard Shaw',\n",
       " 'C. S. Lewis',\n",
       " 'Abraham Lincoln',\n",
       " 'Ronald Reagan',\n",
       " 'Bill Cosby',\n",
       " 'Eckhart Tolle',\n",
       " 'T. S. Eliot',\n",
       " 'Maxwell Maltz',\n",
       " 'Drew Houston',\n",
       " 'Nido R Qubein',\n",
       " 'Jim Rohn',\n",
       " 'Mahatma Gandhi',\n",
       " 'Mary Pickford',\n",
       " 'Sam Levenson',\n",
       " 'Orison Swett Marden',\n",
       " 'Jon Stewart',\n",
       " 'Malcolm X',\n",
       " 'Edith Head',\n",
       " 'Lucille Ball',\n",
       " 'Abraham Lincoln',\n",
       " 'Albert Schweitzer',\n",
       " 'Napoleon Hill',\n",
       " 'Norman Vincent Peale',\n",
       " 'Tony Robbins',\n",
       " 'Ronald Reagan',\n",
       " 'Mary Tyler Moore',\n",
       " 'Anne Sweeney',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Mother Teresa',\n",
       " 'Jim Rohn',\n",
       " 'Carol Burnett',\n",
       " 'Bear Bryant',\n",
       " 'Audrey Hepburn',\n",
       " 'Satchel Paige',\n",
       " 'H. G. Wells',\n",
       " 'Charles Spurgeon',\n",
       " 'Denis Waitley',\n",
       " 'Denis Waitley',\n",
       " 'E. M. Forster',\n",
       " 'Oliver Wendell Holmes, Jr.',\n",
       " 'Theodore Hesburgh',\n",
       " 'Napoleon Hill',\n",
       " 'Martin Luther',\n",
       " 'Jim Rohn',\n",
       " 'Marie Curie',\n",
       " 'Bo Jackson',\n",
       " 'Paulo Coelho',\n",
       " 'Nelson Mandela',\n",
       " 'Confucius',\n",
       " 'Joseph Campbell',\n",
       " 'Napoleon Bonaparte',\n",
       " 'Rosalynn Carter',\n",
       " 'Lydia M. Child',\n",
       " 'Richard Branson',\n",
       " 'Oscar Wilde',\n",
       " 'Pablo Picasso',\n",
       " 'Geezer Butler',\n",
       " 'E. M. Forster',\n",
       " 'Denis Waitley',\n",
       " 'Abraham Lincoln',\n",
       " 'Henry David Thoreau',\n",
       " 'Byron Katie',\n",
       " 'Sam Ewing',\n",
       " 'John C. Maxwell',\n",
       " 'Earl Nightingale',\n",
       " 'Henry Ford',\n",
       " 'Eleanor Roosevelt',\n",
       " 'Ann Landers',\n",
       " 'Robertson Davies',\n",
       " 'Tony Robbins',\n",
       " 'Charles Simmons',\n",
       " 'Brian Tracy',\n",
       " 'Ernest Hemingway',\n",
       " 'Aldous Huxley',\n",
       " 'George Edward Woodberry',\n",
       " 'Winston Churchill',\n",
       " 'Charles C. Krulak',\n",
       " 'Arthur Schopenhauer',\n",
       " 'Mother Teresa',\n",
       " 'Les Brown',\n",
       " 'Andy Rooney',\n",
       " 'Barbara Smith',\n",
       " 'Vince Lombardi',\n",
       " 'Mark Twain',\n",
       " 'Benjamin Disraeli',\n",
       " 'Barack Obama',\n",
       " 'Winston Churchill',\n",
       " 'Johann Wolfgang von Goethe',\n",
       " 'Max Lucado',\n",
       " 'George S. Patton',\n",
       " 'George Washington',\n",
       " 'John Wayne',\n",
       " 'William Morris',\n",
       " 'John J. Pershing',\n",
       " 'John Wooden',\n",
       " 'Nelson Mandela',\n",
       " 'Elbert Hubbard',\n",
       " 'Jimi Hendrix',\n",
       " 'Brian Tracy',\n",
       " 'Louis de Montfort',\n",
       " 'Jon Bon Jovi',\n",
       " 'Sydney J. Harris',\n",
       " 'Calvin Coolidge',\n",
       " 'Robert Kiyosaki',\n",
       " 'Oscar Wilde',\n",
       " 'Corrie Ten Boom',\n",
       " 'Louisa May Alcott',\n",
       " 'Christopher Morley',\n",
       " 'Norman Schwarzkopf',\n",
       " 'Thomas A. Edison',\n",
       " 'Dorothy Thompson',\n",
       " 'Steve Jobs',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Leo Buscaglia',\n",
       " 'Aristotle',\n",
       " 'Jack Welch',\n",
       " 'Plutarch',\n",
       " 'Jim Rohn',\n",
       " 'Carl Rogers',\n",
       " 'Princess Diana',\n",
       " 'John D. Rockefeller',\n",
       " 'Abraham Lincoln',\n",
       " 'Erica Jong',\n",
       " 'Helen Keller',\n",
       " 'Barbara Corcoran',\n",
       " 'Charles Spurgeon',\n",
       " 'William Arthur Ward',\n",
       " 'Doug Larson',\n",
       " 'Dale Carnegie',\n",
       " 'Erich Fromm',\n",
       " 'Elbert Hubbard',\n",
       " 'Denis Leary',\n",
       " 'Mother Teresa',\n",
       " 'Oprah Winfrey',\n",
       " 'Albert Einstein',\n",
       " 'Sydney J. Harris',\n",
       " 'Bruce Lee',\n",
       " 'Henry Ford',\n",
       " 'William Tecumseh Sherman',\n",
       " 'Winston Churchill',\n",
       " 'Nelson Mandela',\n",
       " 'Henry Ford',\n",
       " 'Jim Rohn',\n",
       " 'Benjamin Franklin',\n",
       " 'Jim Rohn',\n",
       " 'Les Brown',\n",
       " 'Wayne Dyer',\n",
       " 'Jimi Hendrix',\n",
       " 'Alphonse de Lamartine',\n",
       " 'Omar N. Bradley',\n",
       " 'Confucius',\n",
       " 'Steve Jobs',\n",
       " 'Harriet Beecher Stowe',\n",
       " 'Roald Dahl',\n",
       " 'Corrie Ten Boom',\n",
       " 'Ellen Glasgow',\n",
       " 'Will Rogers',\n",
       " 'Marilyn Monroe',\n",
       " 'Hermann Hesse',\n",
       " 'Emile Zola',\n",
       " 'Julie Isphording',\n",
       " 'Zig Ziglar',\n",
       " 'Eleanor Roosevelt',\n",
       " 'William Jennings Bryan',\n",
       " 'Michel de Montaigne',\n",
       " 'Mother Teresa',\n",
       " 'Mark Twain',\n",
       " 'Booker T. Washington',\n",
       " 'Chuck Palahniuk',\n",
       " 'Edgar Allan Poe',\n",
       " 'John Wooden',\n",
       " 'Edmund Burke',\n",
       " 'Daniel J. Boorstin',\n",
       " 'William Penn',\n",
       " 'Lee Iacocca',\n",
       " 'Albert Einstein',\n",
       " 'Abu Bakr',\n",
       " 'Dr. Seuss',\n",
       " 'Euripides',\n",
       " 'Jim Rohn',\n",
       " 'Wayne Dyer',\n",
       " 'Nelson Mandela',\n",
       " 'Jean de La Fontaine',\n",
       " 'William Arthur Ward',\n",
       " 'Margaret Fuller',\n",
       " 'Mark Twain',\n",
       " 'Walt Disney',\n",
       " 'Charles Kettering',\n",
       " 'Richard DeVos',\n",
       " 'Marcus Aurelius',\n",
       " 'Robert Fulghum',\n",
       " 'Milton Berle',\n",
       " 'Jim Rohn',\n",
       " 'Abraham Lincoln',\n",
       " 'Denis Waitley',\n",
       " 'Virginia Woolf',\n",
       " 'Tom Krause',\n",
       " 'Abdul Kalam',\n",
       " 'Edward Eggleston',\n",
       " 'Albert Einstein',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Gilda Radner',\n",
       " 'Jim Rohn',\n",
       " 'Frederick Buechner',\n",
       " 'Colin Powell',\n",
       " 'Wilma Rudolph',\n",
       " 'Albert Einstein',\n",
       " 'Lou Holtz',\n",
       " 'Goran Persson',\n",
       " 'Will Smith',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Barbara Bush',\n",
       " 'Rose Kennedy',\n",
       " 'John F. Kennedy',\n",
       " 'Michael Landon',\n",
       " 'Henry David Thoreau',\n",
       " 'Martin Luther King, Jr.',\n",
       " 'Ayn Rand',\n",
       " 'William Shakespeare',\n",
       " 'F. Burton Howard',\n",
       " 'Woody Allen',\n",
       " 'Christopher Reeve',\n",
       " 'Sydney J. Harris',\n",
       " 'Denis Waitley',\n",
       " 'Tom Brokaw',\n",
       " 'Bruce Lee',\n",
       " 'Jack Dixon',\n",
       " 'Pearl S. Buck',\n",
       " 'William Carey',\n",
       " 'John C. Maxwell',\n",
       " 'Albert Einstein',\n",
       " 'Nicholas Sparks',\n",
       " 'Joseph Campbell',\n",
       " 'Harry Emerson Fosdick',\n",
       " 'Steve Jobs',\n",
       " 'Golda Meir',\n",
       " 'Dwight L. Moody',\n",
       " 'Bill Gates',\n",
       " 'Winston Churchill',\n",
       " 'Soren Kierkegaard',\n",
       " 'Lois Wyse',\n",
       " 'Ambrose Bierce',\n",
       " 'Aristotle',\n",
       " 'Dwight D. Eisenhower',\n",
       " 'Ernest Hemingway',\n",
       " 'Arthur Schopenhauer',\n",
       " 'Golda Meir',\n",
       " 'Joy Page',\n",
       " 'Stephen Covey',\n",
       " 'Lucille Ball',\n",
       " 'John Wooden',\n",
       " 'Napoleon Hill',\n",
       " 'Adrienne Rich',\n",
       " 'Babe Ruth',\n",
       " 'Marcus Tullius Cicero',\n",
       " 'Will Rogers',\n",
       " 'Benjamin Franklin',\n",
       " 'Pat Riley',\n",
       " 'Nora Ephron',\n",
       " 'Anne Frank',\n",
       " 'Peter Drucker',\n",
       " 'Morris West',\n",
       " 'Haim Ginott',\n",
       " 'Helen Keller',\n",
       " 'Arthur Ashe',\n",
       " 'Zig Ziglar',\n",
       " 'Winston Churchill',\n",
       " 'Gerry Spence',\n",
       " 'Joyce Brothers',\n",
       " 'Jim Rohn',\n",
       " 'Abraham Lincoln',\n",
       " 'Princess Diana',\n",
       " 'Viktor E. Frankl',\n",
       " 'Frances Hodgson Burnett',\n",
       " 'Bruce Lee',\n",
       " 'Marian Wright Edelman',\n",
       " 'Chief Seattle',\n",
       " 'Dave Barry',\n",
       " 'Florence Nightingale',\n",
       " 'Jim Rohn',\n",
       " 'Thomas Paine',\n",
       " 'Clint Eastwood',\n",
       " 'Rosa Parks',\n",
       " 'B. B. King',\n",
       " 'Pablo Picasso',\n",
       " 'Helen Keller',\n",
       " 'Sheryl Sandberg',\n",
       " 'Zig Ziglar',\n",
       " 'Byron Katie',\n",
       " 'Eleanor Roosevelt',\n",
       " 'Melody Beattie',\n",
       " 'Betty Friedan',\n",
       " 'William Arthur Ward',\n",
       " 'Theodore Roosevelt',\n",
       " 'Jackie Joyner-Kersee',\n",
       " 'Vince Lombardi',\n",
       " 'Muhammad Ali',\n",
       " 'Horace Greeley',\n",
       " 'Bob Marley',\n",
       " 'Ernest Hemingway',\n",
       " 'Brian Tracy',\n",
       " 'Mary Kay Ash',\n",
       " 'Paul Valery',\n",
       " 'Irving Berlin',\n",
       " 'Bono',\n",
       " 'Peter Marshall',\n",
       " 'Elizabeth Gilbert',\n",
       " 'Jim Rohn',\n",
       " 'Desmond Tutu',\n",
       " 'Ken Keyes Jr.',\n",
       " 'Albert Einstein',\n",
       " 'Elisabeth Kubler-Ross',\n",
       " 'Tony Robbins',\n",
       " 'Stephen Covey',\n",
       " 'John Wooden',\n",
       " 'Erica Jong',\n",
       " 'Thomas Szasz',\n",
       " 'William James',\n",
       " 'John Barrymore',\n",
       " 'Joseph Joubert',\n",
       " 'Susan Sarandon',\n",
       " 'Voltaire',\n",
       " 'Jim Rohn',\n",
       " 'Barbara Johnson',\n",
       " 'John F. Kennedy',\n",
       " 'Lawrence Block',\n",
       " 'Frederick Douglass',\n",
       " 'Lucy Maud Montgomery',\n",
       " 'Albert Camus',\n",
       " 'Mike Singletary',\n",
       " 'John Bingham',\n",
       " 'Honore de Balzac',\n",
       " 'Burton Hill',\n",
       " 'Deepak Chopra',\n",
       " 'Barbara De Angelis',\n",
       " 'Eleanor Roosevelt',\n",
       " 'Vincent Van Gogh',\n",
       " 'Dale Carnegie',\n",
       " 'Mark Twain',\n",
       " 'John Locke',\n",
       " 'Julie Andrews',\n",
       " 'Guy Finley',\n",
       " 'Harper Lee',\n",
       " 'M. Scott Peck',\n",
       " 'Rumi',\n",
       " 'Plato',\n",
       " 'Billy Graham',\n",
       " 'Mary Kay Ash',\n",
       " 'Leo Buscaglia',\n",
       " 'Tony Robbins',\n",
       " 'Alfred Lord Tennyson',\n",
       " 'Margaret Mead',\n",
       " 'Billy Graham',\n",
       " 'Lydia M. Child',\n",
       " 'Ruby Dee',\n",
       " 'Michael Jordan',\n",
       " 'Leo Tolstoy',\n",
       " 'Bill Gates',\n",
       " 'Andrew Carnegie',\n",
       " 'Vern Law',\n",
       " 'Anais Nin',\n",
       " 'Jim Rohn',\n",
       " 'Albert Camus',\n",
       " 'Confucius',\n",
       " 'Warren Buffett',\n",
       " 'Richard Lamm',\n",
       " 'Stephen Covey',\n",
       " 'Louis de Montfort',\n",
       " 'Gloria Steinem',\n",
       " 'Christian Dior',\n",
       " 'Winston Churchill',\n",
       " 'Wayne Dyer',\n",
       " 'James Madison',\n",
       " 'Stephen Hawking',\n",
       " 'Joseph Campbell',\n",
       " 'Heath Ledger',\n",
       " 'Jim Rohn',\n",
       " 'Jim Rohn',\n",
       " 'Alan Cohen',\n",
       " 'Orison Swett Marden',\n",
       " 'Billy Graham',\n",
       " 'Ralph Waldo Emerson',\n",
       " 'John Muir',\n",
       " 'James Allen',\n",
       " 'Leonardo da Vinci',\n",
       " 'Tony Robbins',\n",
       " 'Malcolm Forbes',\n",
       " 'Tim Ferriss',\n",
       " 'Jacqueline Gareau',\n",
       " 'Joseph Addison',\n",
       " 'Benjamin Jowett',\n",
       " 'Jim Rohn',\n",
       " 'Robert Collier',\n",
       " 'Charles Buxton',\n",
       " 'Vernon Howard',\n",
       " 'Vince Lombardi',\n",
       " 'Peace Pilgrim',\n",
       " 'Wilma Rudolph',\n",
       " 'Jim Rohn',\n",
       " 'Haruki Murakami',\n",
       " 'James A. Baldwin',\n",
       " 'James Allen',\n",
       " 'John Green',\n",
       " 'Stephen Hawking',\n",
       " 'Khalil Gibran',\n",
       " 'Jim Rohn',\n",
       " 'Unknown',\n",
       " 'Thomas Huxley',\n",
       " 'Bobby Seale',\n",
       " 'Les Brown',\n",
       " 'John F. Kennedy',\n",
       " 'Andre Gide',\n",
       " 'Kurt Vonnegut',\n",
       " 'Thomas Fuller',\n",
       " 'Theodore Roosevelt',\n",
       " 'Anna Quindlen',\n",
       " 'Wayne Dyer',\n",
       " 'Paul Tournier',\n",
       " 'Bernard Baruch',\n",
       " 'Zig Ziglar',\n",
       " 'Maya Angelou',\n",
       " 'Paulo Coelho',\n",
       " 'Melody Beattie',\n",
       " 'Joseph Campbell',\n",
       " 'Princess Diana',\n",
       " 'Bernard Williams',\n",
       " 'Honore de Balzac',\n",
       " 'Ernest Hemingway',\n",
       " 'Janis Ian',\n",
       " 'Wayne Dyer',\n",
       " 'Ann Landers',\n",
       " 'Goldie Hawn',\n",
       " 'Wayne Dyer',\n",
       " 'Storm Jameson',\n",
       " 'Robin Sharma',\n",
       " 'Ralph Waldo Emerson',\n",
       " 'Abraham Lincoln',\n",
       " 'Ralph Abernathy',\n",
       " 'Robert Frost',\n",
       " 'Norman Vincent Peale',\n",
       " 'Vernon Howard',\n",
       " 'Joe Girard',\n",
       " 'Kurt Vonnegut',\n",
       " 'Francis Bacon',\n",
       " 'Shakti Gawain',\n",
       " 'Jon Bon Jovi',\n",
       " 'Ernest Hemingway',\n",
       " 'Wayne Dyer',\n",
       " 'Tony Robbins',\n",
       " 'Naguib Mahfouz',\n",
       " 'Henry David Thoreau',\n",
       " 'Dale Carnegie',\n",
       " 'Billy Graham',\n",
       " 'Swami Vivekananda',\n",
       " 'Billy Graham',\n",
       " 'James Madison',\n",
       " 'Johnny Depp',\n",
       " 'Alice Walker',\n",
       " 'Ronnie Lott',\n",
       " 'Harvey Fierstein',\n",
       " 'John Ruskin',\n",
       " 'Tyra Banks',\n",
       " 'Unknown',\n",
       " 'Victor Hugo',\n",
       " 'Thomas Jefferson',\n",
       " 'Sam Cawthorn',\n",
       " 'Rumi',\n",
       " 'Anton Chekhov',\n",
       " 'Winston Churchill',\n",
       " 'Helen Keller',\n",
       " 'Kathrine Switzer',\n",
       " 'Arthur Ashe',\n",
       " 'Billy Graham',\n",
       " 'Les Brown',\n",
       " 'Lady Gaga',\n",
       " 'Uta Hagen',\n",
       " 'Dalai Lama',\n",
       " 'John Bunyan',\n",
       " 'Jack LaLanne',\n",
       " 'Stephen King',\n",
       " 'Norman Vincent Peale',\n",
       " 'Milton Friedman',\n",
       " 'Paulo Coelho',\n",
       " 'Edward de Bono',\n",
       " 'Don Herold',\n",
       " 'Wayne Dyer',\n",
       " 'Arthur Rubinstein',\n",
       " 'Johann Wolfgang von Goethe',\n",
       " 'Napoleon Hill',\n",
       " 'Lou Holtz',\n",
       " 'Abraham Lincoln',\n",
       " 'Marcus Aurelius',\n",
       " 'Pope John Paul II',\n",
       " 'Neal A. Maxwell',\n",
       " 'Anne Frank',\n",
       " 'George S. Patton',\n",
       " 'William James',\n",
       " 'Sun Tzu',\n",
       " 'Galileo Galilei',\n",
       " 'Epictetus',\n",
       " 'George S. Patton',\n",
       " 'Thomas Fuller',\n",
       " 'Ray Kroc',\n",
       " 'Christina Rossetti',\n",
       " 'Jim Rohn',\n",
       " 'Arthur Ashe',\n",
       " 'Sylvia Plath',\n",
       " 'James Earl Jones',\n",
       " 'Jim Rohn',\n",
       " 'Mark Twain',\n",
       " 'Og Mandino',\n",
       " 'Malcolm X',\n",
       " 'W. Clement Stone',\n",
       " 'Andy Rooney',\n",
       " 'Rick Warren',\n",
       " 'Abraham Lincoln',\n",
       " 'Thomas Jefferson',\n",
       " 'Tim Allen']"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2=df1[0:1000]\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "060503ca",
   "metadata": {},
   "outputs": [
    {
     "ename": "NoSuchElementException",
     "evalue": "Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//li[@class=\"next\"]\"}\n  (Session info: chrome=108.0.5359.124)\nStacktrace:\n0   chromedriver                        0x0000000108002f38 chromedriver + 4910904\n1   chromedriver                        0x0000000107f82a03 chromedriver + 4385283\n2   chromedriver                        0x0000000107bc7747 chromedriver + 472903\n3   chromedriver                        0x0000000107c0c34c chromedriver + 754508\n4   chromedriver                        0x0000000107c0c5a1 chromedriver + 755105\n5   chromedriver                        0x0000000107c4fe94 chromedriver + 1031828\n6   chromedriver                        0x0000000107c3213d chromedriver + 909629\n7   chromedriver                        0x0000000107c4d28e chromedriver + 1020558\n8   chromedriver                        0x0000000107c31ee3 chromedriver + 909027\n9   chromedriver                        0x0000000107bfc30c chromedriver + 688908\n10  chromedriver                        0x0000000107bfd88e chromedriver + 694414\n11  chromedriver                        0x0000000107fd01de chromedriver + 4702686\n12  chromedriver                        0x0000000107fd4b19 chromedriver + 4721433\n13  chromedriver                        0x0000000107fdc28e chromedriver + 4752014\n14  chromedriver                        0x0000000107fd591a chromedriver + 4725018\n15  chromedriver                        0x0000000107fa9b02 chromedriver + 4545282\n16  chromedriver                        0x0000000107ff4888 chromedriver + 4851848\n17  chromedriver                        0x0000000107ff4a05 chromedriver + 4852229\n18  chromedriver                        0x000000010800ae5f chromedriver + 4943455\n19  libsystem_pthread.dylib             0x00007fff6e5642eb _pthread_body + 126\n20  libsystem_pthread.dylib             0x00007fff6e567249 _pthread_start + 66\n21  libsystem_pthread.dylib             0x00007fff6e56340d thread_start + 13\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNoSuchElementException\u001b[0m                    Traceback (most recent call last)",
      "Input \u001b[0;32mIn [189]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m typeofquote_tags:\n\u001b[1;32m      6\u001b[0m     typeofquote\u001b[38;5;241m.\u001b[39mappend(i\u001b[38;5;241m.\u001b[39mtext)\n\u001b[0;32m----> 7\u001b[0m next_button\u001b[38;5;241m=\u001b[39m\u001b[43mdriver\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfind_element\u001b[49m\u001b[43m(\u001b[49m\u001b[43mBy\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mXPATH\u001b[49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m//li[@class=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mnext\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m]\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      8\u001b[0m next_button\u001b[38;5;241m.\u001b[39mclick()\n\u001b[1;32m      9\u001b[0m time\u001b[38;5;241m.\u001b[39msleep(\u001b[38;5;241m3\u001b[39m)\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:861\u001b[0m, in \u001b[0;36mWebDriver.find_element\u001b[0;34m(self, by, value)\u001b[0m\n\u001b[1;32m    858\u001b[0m     by \u001b[38;5;241m=\u001b[39m By\u001b[38;5;241m.\u001b[39mCSS_SELECTOR\n\u001b[1;32m    859\u001b[0m     value \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m[name=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;241m%\u001b[39m value\n\u001b[0;32m--> 861\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexecute\u001b[49m\u001b[43m(\u001b[49m\u001b[43mCommand\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFIND_ELEMENT\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m{\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43musing\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mby\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mvalue\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:444\u001b[0m, in \u001b[0;36mWebDriver.execute\u001b[0;34m(self, driver_command, params)\u001b[0m\n\u001b[1;32m    442\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcommand_executor\u001b[38;5;241m.\u001b[39mexecute(driver_command, params)\n\u001b[1;32m    443\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m response:\n\u001b[0;32m--> 444\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43merror_handler\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcheck_response\u001b[49m\u001b[43m(\u001b[49m\u001b[43mresponse\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    445\u001b[0m     response[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_unwrap_value(response\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[1;32m    446\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m response\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:249\u001b[0m, in \u001b[0;36mErrorHandler.check_response\u001b[0;34m(self, response)\u001b[0m\n\u001b[1;32m    247\u001b[0m         alert_text \u001b[38;5;241m=\u001b[39m value[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124malert\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtext\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    248\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m exception_class(message, screen, stacktrace, alert_text)  \u001b[38;5;66;03m# type: ignore[call-arg]  # mypy is not smart enough here\u001b[39;00m\n\u001b[0;32m--> 249\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m exception_class(message, screen, stacktrace)\n",
      "\u001b[0;31mNoSuchElementException\u001b[0m: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//li[@class=\"next\"]\"}\n  (Session info: chrome=108.0.5359.124)\nStacktrace:\n0   chromedriver                        0x0000000108002f38 chromedriver + 4910904\n1   chromedriver                        0x0000000107f82a03 chromedriver + 4385283\n2   chromedriver                        0x0000000107bc7747 chromedriver + 472903\n3   chromedriver                        0x0000000107c0c34c chromedriver + 754508\n4   chromedriver                        0x0000000107c0c5a1 chromedriver + 755105\n5   chromedriver                        0x0000000107c4fe94 chromedriver + 1031828\n6   chromedriver                        0x0000000107c3213d chromedriver + 909629\n7   chromedriver                        0x0000000107c4d28e chromedriver + 1020558\n8   chromedriver                        0x0000000107c31ee3 chromedriver + 909027\n9   chromedriver                        0x0000000107bfc30c chromedriver + 688908\n10  chromedriver                        0x0000000107bfd88e chromedriver + 694414\n11  chromedriver                        0x0000000107fd01de chromedriver + 4702686\n12  chromedriver                        0x0000000107fd4b19 chromedriver + 4721433\n13  chromedriver                        0x0000000107fdc28e chromedriver + 4752014\n14  chromedriver                        0x0000000107fd591a chromedriver + 4725018\n15  chromedriver                        0x0000000107fa9b02 chromedriver + 4545282\n16  chromedriver                        0x0000000107ff4888 chromedriver + 4851848\n17  chromedriver                        0x0000000107ff4a05 chromedriver + 4852229\n18  chromedriver                        0x000000010800ae5f chromedriver + 4943455\n19  libsystem_pthread.dylib             0x00007fff6e5642eb _pthread_body + 126\n20  libsystem_pthread.dylib             0x00007fff6e567249 _pthread_start + 66\n21  libsystem_pthread.dylib             0x00007fff6e56340d thread_start + 13\n"
     ]
    }
   ],
   "source": [
    "start=0\n",
    "end=9\n",
    "for page in range(start,end):\n",
    "    typeofquote_tags=driver.find_elements(By.XPATH,'//div[@class=\"tags\"]')\n",
    "    for i in typeofquote_tags:\n",
    "        typeofquote.append(i.text)\n",
    "    next_button=driver.find_element(By.XPATH,'//li[@class=\"next\"]')\n",
    "    next_button.click()\n",
    "    time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "8a2d90cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "start=8\n",
    "end=9\n",
    "for page in range(start,end):\n",
    "    typeofquote_tags=driver.find_elements(By.XPATH,'//div[@class=\"tags\"]')\n",
    "    for i in typeofquote_tags:\n",
    "        typeofquote.append(i.text)\n",
    "    next_button=driver.find_element(By.XPATH,'//li[@class=\"next\"]')\n",
    "    next_button.click()\n",
    "    time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "5cb64953",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1100"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(typeofquote)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "ead3018d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Essence, Deep Thought, Transcendentalism',\n",
       " 'Inspiration, Past, Trying',\n",
       " 'Country, Peace, War',\n",
       " 'Inspirational, Motivational, Death',\n",
       " '4th Of July, Food, Patriotic',\n",
       " 'Inspirational, Success, Basketball',\n",
       " 'Strong, Revenge, Intelligent',\n",
       " 'Inspirational, Teacher, Religious',\n",
       " 'Truth, Honesty, Lying',\n",
       " 'Funny, Reading, Learning',\n",
       " 'Strong, Thoughtful, Compassion',\n",
       " 'Love, Funny, Life',\n",
       " 'Freedom, Men, Democracies Have',\n",
       " 'God, Religious, Atheist',\n",
       " 'Respect, Kindness, Character',\n",
       " 'Inspirational, Motivational, Change',\n",
       " 'Inspirational, Life, Inspiring',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Inspiring, Country, 4th Of July',\n",
       " 'Inspirational, Dream, Hate',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Forgiveness, God, Christian',\n",
       " 'Country, Men, Squares',\n",
       " 'Inspirational, Relationship, Positive',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Love, Friendship, Relationship',\n",
       " 'Faith, God, Christian',\n",
       " 'Art, Freedom, Political Will',\n",
       " 'Inspirational, Life, Faith',\n",
       " 'Inspirational, Life, Meaningful',\n",
       " 'Happiness, Time, Clever',\n",
       " 'Inspirational, Inspiring, Success',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Music, Sound And Music, Musical Life',\n",
       " 'Adversity, Blow, Action',\n",
       " 'Positive, Thinking Of You, Attitude',\n",
       " 'Inspirational, Funny, Life',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Inspirational, Memorial Day, Freedom',\n",
       " 'Freedom, Patriotic, Vaccines',\n",
       " 'Philosophy, Ignorance, Democratic Socialism',\n",
       " 'Inspirational, Dance, Education',\n",
       " 'Life, Change, Positive',\n",
       " 'Life, Bullying, Mistake',\n",
       " 'Life, Nature, Children',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Marriage, Love You, Long',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Diversity, Important, Liberty',\n",
       " 'Inspirational, God, Faith',\n",
       " 'Inspirational, Motivational, Inspiring',\n",
       " 'Beauty, Love Yourself, Your Beautiful',\n",
       " 'Business, Stupid, Government',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Peace, Military, War',\n",
       " 'Inspirational, Leadership, Confidence',\n",
       " 'Motivational, Military, War',\n",
       " 'Christian, Jesus, Confusing',\n",
       " 'Inspirational, Success, Sports',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Inspirational, Life, Clever',\n",
       " 'Inspirational, Death, Failure',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Inspiring, Hope, Spring',\n",
       " 'Motivational, Running, People',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Summer, Food, Garden',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Inspirational, Life, Thank You',\n",
       " 'Funny, Sports, Jobs',\n",
       " 'Being Strong, Wisdom, Stay Strong',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Motivational, Positive, Moon',\n",
       " 'Time, Pain, Get Well',\n",
       " 'Life, God, Christian',\n",
       " 'President, Needs, Purpose',\n",
       " 'God, Faith, Christian',\n",
       " 'Women, Failure, Successful',\n",
       " 'Inspirational, Morning, Kindness',\n",
       " 'Hiding Place, Ability, Baby Boom',\n",
       " 'Inspirational, Change, Philosophy',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Inspirational, Family, Inspiring',\n",
       " 'Inspirational, Success, Courage',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Christian, Vision, Missionary',\n",
       " 'Inspirational, Positive, Regret',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Inspirational, Life, Encouragement',\n",
       " 'Happy Birthday, Baseball, Fun',\n",
       " 'Leadership, Power, Opportunity',\n",
       " 'Inspirational, Life, Positive',\n",
       " 'Inspirational, Encouraging, Patience',\n",
       " 'New Year, Fun, New Beginnings',\n",
       " 'Music, Sports, Hunting',\n",
       " 'Trust, Encouraging, Uplifting',\n",
       " 'Inspirational, Funny, Change',\n",
       " 'Success, God, Mother',\n",
       " 'Inspirational, Motivational, Change',\n",
       " 'Inspirational, Life, Success',\n",
       " 'Peace, War, Government',\n",
       " 'Life, Strength, Courage',\n",
       " 'Positive, Family, Trust',\n",
       " 'Inspirational, Motivational, Teacher',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Success, Spiritual, Wisdom',\n",
       " 'Inspiring, Encouragement, Bad Day',\n",
       " 'Strength, Christian, Self',\n",
       " 'Life, Motivational, Success',\n",
       " 'Inspirational, Success, Basketball',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Long, Chinese, World',\n",
       " 'Gun, People, Second Amendment',\n",
       " 'Love, Valentines Day, Fate',\n",
       " 'Inspirational, Greatness, Envy',\n",
       " 'Love, Inspiring, Positivity',\n",
       " 'Military, Marine, Hands',\n",
       " 'Practice, Political, Deception',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Love, Life, Crush',\n",
       " 'Inspirational, Motivational, Peace',\n",
       " 'Inspirational, Freedom, Responsibility',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Motivational, Running, Ideas',\n",
       " 'Inspirational, Positive, Success',\n",
       " 'Inspirational, God, Stay Strong',\n",
       " 'Inspirational, Life, Happiness',\n",
       " 'Sports, Hero, News',\n",
       " 'Anger, Adversity, Climbing',\n",
       " 'Inspirational, Inspiring, Friends',\n",
       " 'Inspirational, Funny, Positive',\n",
       " 'Motivational, Inspiration, Adversity',\n",
       " 'Children, Creativity, Ignorance',\n",
       " 'Life, Music, Beautiful',\n",
       " 'Inspirational, Positive, Freedom',\n",
       " 'Inspirational, Life, Bullying',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Inspirational, Inspiring, Beauty',\n",
       " 'Witty, Attitude, Freedom',\n",
       " 'Military, Marine, Men',\n",
       " 'Motivational, Success, Positivity',\n",
       " 'Inspirational, Educational, Learning',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Plato, War, Government',\n",
       " 'Inspirational, Life, Second Chance',\n",
       " 'Motivational, Sports, Football',\n",
       " 'Thanksgiving, Thankful, Gratitude',\n",
       " 'Funny, Humorous, Character',\n",
       " 'Inspirational, Motivational, Badass',\n",
       " 'Life, Inspiring, Encouragement',\n",
       " 'Love, Happiness, Smile',\n",
       " 'Moving On, Famous Inspirational, Greatness',\n",
       " 'Motivational, Happiness, Mean',\n",
       " 'Life, Birthday, Inspiring',\n",
       " 'Children, Educational, Future',\n",
       " 'Change, Inspiring, Life Changing',\n",
       " 'Inspirational, Integrity, Yoga',\n",
       " 'Inspirational, Funny, Life',\n",
       " 'Inspirational, Positive, Wisdom',\n",
       " 'Funny, Hilarious, Education',\n",
       " 'Sheep, Government, Political',\n",
       " 'Leadership, Appreciation, Team Building',\n",
       " 'Inspirational, Change, Success',\n",
       " 'Empowerment, Crowds, Empowering Women',\n",
       " 'Education, Learning, Knowledge',\n",
       " 'Fear, Positivity, Doubting Everything',\n",
       " 'Inspirational, Motivational, Sports',\n",
       " 'Happiness, Inspiring, Happy',\n",
       " 'Funny, Attitude, Climbing',\n",
       " 'Confidence, Littles, Matter',\n",
       " 'Motivational, Buddhist, Children',\n",
       " 'Mean, Opportunity, Nerd',\n",
       " 'Love, Funny, Romantic',\n",
       " 'Inspirational, Positive, Stars',\n",
       " 'Running, Years, Tests',\n",
       " 'Inspirational, Motivational, Relationship',\n",
       " 'Peace, Integrity, Patriotic',\n",
       " 'Happiness, Work, Opportunity',\n",
       " 'Inspiring, Forgiveness, New Beginnings',\n",
       " 'Love, Life, Being Yourself',\n",
       " 'Motivational, Success, Work',\n",
       " 'Positive, Wisdom, Philosophical',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Life, Leadership, Motivational Sports',\n",
       " 'Spiritual, Sufi, Wherever You Are',\n",
       " 'Love, Confidence, Forgiving',\n",
       " 'Inspirational, Motivational, Change',\n",
       " 'Inspirational, Life, Music',\n",
       " 'Artist, Age, Example',\n",
       " 'Inspirational, Motivational, Wise',\n",
       " 'Inspirational, Funny, Stupid',\n",
       " 'Education, Curiosity, Genius',\n",
       " 'Motivational, Inspiring, Leadership',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Love, Inspirational, Motivational',\n",
       " 'Gun, Two, Qualms About',\n",
       " 'Inspirational, Greatness, Best Effort',\n",
       " 'Spiritual, Truth, Yoga',\n",
       " 'Inspirational, Leadership, Education',\n",
       " 'Inspirational, Funny, Life',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Inspirational, Motivational, Change',\n",
       " 'Inspirational, Life, Happiness',\n",
       " 'Inspirational, Life, Change',\n",
       " 'Life, Inspiring, Veterans Day',\n",
       " 'Women, Book, Heart',\n",
       " 'Inspirational, Positive, Inspiring',\n",
       " 'Love, Inspiring, Positivity',\n",
       " 'Relationship, Inspiring, Trust',\n",
       " 'The End Of The Day, Goes On, Realizing',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Happiness, Smile, Inspiration',\n",
       " 'Inspirational, Leadership, Karma',\n",
       " 'Life, Miracle, Way To Live',\n",
       " 'Life, Positive, Time',\n",
       " 'Inspirational, Life, Fear',\n",
       " 'Inspirational, Positive, Religious',\n",
       " 'Future, Kwanzaa, African American',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Inspirational, Life, Inspiring',\n",
       " 'Inspirational, Motivational, Inspiring',\n",
       " 'Funny, Running, Country',\n",
       " 'Wise, Wisdom, Clever',\n",
       " 'Inspirational, Motivational, Spiritual',\n",
       " 'Inspiring, Christmas, Dream',\n",
       " 'Positive, Witty, Mistake',\n",
       " 'Life, Karma, People',\n",
       " 'Inspirational, Education, Teacher',\n",
       " 'Inspirational, Leadership, Wise',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Inspirational, Success, Encouraging',\n",
       " 'Christmas, Xmas, Heart',\n",
       " 'Inspirational, Motivational, Spiritual',\n",
       " 'Motivational, God, Religious',\n",
       " 'Inspirational, Freedom, Fear',\n",
       " 'Inspirational, Relationship, Broken Heart',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Graduation, Sports, Football',\n",
       " 'Positive, Prayer, Life Changing',\n",
       " 'Motivational, Believe, Acceptance',\n",
       " 'Confidence, Being Yourself, Self Esteem',\n",
       " 'Bible, God, Education',\n",
       " 'Thanksgiving, Prayer, Wings',\n",
       " 'Strength, Wisdom, Veterans Day',\n",
       " 'Inspirational, Life, Jealousy',\n",
       " 'Anniversary, Marriage, Valentines Day',\n",
       " 'Knowledge, Technology, Practice',\n",
       " 'Inspirational, Hope, Freedom',\n",
       " 'Softball, Faith, Inspiration',\n",
       " 'Faith, Sports, Running',\n",
       " 'Inspirational, Kindness, Teaching',\n",
       " 'Hope, Wisdom, Godly',\n",
       " 'Giving Up, Powerful, Mean',\n",
       " 'Inspirational, Confidence, Cute Relationship',\n",
       " 'Life, Self Esteem, Women',\n",
       " 'Peace, Nature, Inspiration',\n",
       " 'Motivational, Success, Perseverance',\n",
       " 'Inspirational, Motivational, Sports',\n",
       " 'Motivational, Success, Encouragement',\n",
       " 'Love, Motivational, Family',\n",
       " 'Government, Liberty, Libertarian',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Funny, Wisdom, Humorous',\n",
       " 'Learning, Intelligent, Perspective',\n",
       " 'Inspirational, Happiness, Inspiring',\n",
       " 'Life, Happiness, People',\n",
       " 'Happiness, Teaching, Use',\n",
       " 'Inspirational, Perseverance, Determination',\n",
       " 'Motivational, Basketball, Confidence',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Family, Faith, Inspiration',\n",
       " 'Motivational, Thanksgiving, Gratitude',\n",
       " 'Love, Inspirational, Motivational',\n",
       " 'Motivational, Business, Military',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Art, Crazy, War',\n",
       " 'Inspirational, Attitude, Learning',\n",
       " 'Forgiveness, Spiritual, Wisdom',\n",
       " 'Sympathy, Death, Wisdom',\n",
       " 'Inspirational, Motivational, Determination',\n",
       " 'Inspirational, Motivational, Leadership',\n",
       " 'Inspirational, Work, Women',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Life, Motivation, Winning',\n",
       " 'Life, Sad, Writing',\n",
       " 'Love, Life, Heart',\n",
       " 'Inspirational, Success, Basketball',\n",
       " 'Life, Broken Heart, Heartbreak',\n",
       " 'Happiness, Smile, Happy',\n",
       " 'Peace, Freedom, Inspiration',\n",
       " 'Inspirational, Life, Positive',\n",
       " 'Inspirational, Funny, Dog',\n",
       " 'Reality, Servant Of God, Careers',\n",
       " 'Wisdom, Religious, Freedom',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Friendship, Teamwork, Mom',\n",
       " 'Military, Marine, Two',\n",
       " 'Inspirational, Patience, Spiritual',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Respect, Fear, Integrity',\n",
       " 'Love, Life, Patience',\n",
       " 'Fall, Revolutionary Leaders, Apples',\n",
       " 'Love, Forgiveness, Peace',\n",
       " 'Wisdom, Adversity, Triumph',\n",
       " 'Motivational, Spiritual, Self Esteem',\n",
       " 'Inspirational, Business, Imagination',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Motivational, Success, Education',\n",
       " 'Inspiring, Education, Teacher',\n",
       " 'Determination, Dragons, Hiking',\n",
       " 'Love, Inspirational, Funny',\n",
       " 'Moving On, Break Up, I Miss You',\n",
       " 'Life, Positive, Encouraging',\n",
       " 'Thanksgiving, Thankful, Gratitude',\n",
       " 'Attitude, Positive Thinking, Positivity',\n",
       " 'Inspiration, Miracle, Preparation',\n",
       " 'Life, Motivational, Positive',\n",
       " 'Inspirational, Success, Determination',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Education, Wisdom, Teaching',\n",
       " 'Trust, Faith, Spiritual',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Love, Inspirational, Forgiveness',\n",
       " 'Inspirational, Change, Inspiring',\n",
       " 'Inspirational, Motivational, Strength',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Military, Fighting, Marine',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Love, Family, Marriage',\n",
       " 'Motivational, Military, Marine',\n",
       " 'Change, Thank You, Memorial Day',\n",
       " 'Inspirational, Change, Smile',\n",
       " 'Leadership, Wisdom, Distance',\n",
       " 'Inspirational, Funny, Life',\n",
       " 'Inspirational, Education, Perseverance',\n",
       " 'Love, Inspirational, Dark',\n",
       " 'Freedom, Numbers, Being Free',\n",
       " 'Christian, Feet, Sound',\n",
       " 'Family, Fathers Day, Children',\n",
       " 'Inspirational, Strength, Inspiring',\n",
       " 'Love, Life, Suffering',\n",
       " 'Love, Life, Happy',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Inspirational, Spiritual, Nature',\n",
       " 'New Year, New Beginnings, Might',\n",
       " 'Inspirational, Strength, Success',\n",
       " 'Inspirational, Life, Positive',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Kindness, Thinking, Wicked World',\n",
       " 'Success, Greatness, Errors',\n",
       " 'Christian, Goal, Church',\n",
       " 'Motivational, Inspiring, Graduation',\n",
       " 'Inspirational, Life, Being Yourself',\n",
       " 'Inspirational, Spiritual, Time',\n",
       " 'Integrity, Heart, Positivity',\n",
       " 'Inspirational, Thank You, Thanksgiving',\n",
       " 'Inspirational, Positive, Success',\n",
       " 'Writing, Self Improvement, Self Help',\n",
       " 'Drinking, Sick, Way',\n",
       " 'Family, Mom, Mother',\n",
       " 'Inspirational, Positive, Moving On',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Learning, Miracle, Process',\n",
       " 'Funny, Basketball, Sports',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Change, Positive, Courage',\n",
       " 'Inspirational, Greatness, What Matters',\n",
       " 'Effort, Greed, Needs',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Life, Motivational, Stay Strong',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Inspirational, Funny, Leadership',\n",
       " 'Inspirational, Positive, Determination',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Inspirational, Success, Graduation',\n",
       " 'Teacher, Inspirational Love, Peace',\n",
       " 'Hope, Optimistic, Fighting',\n",
       " 'Inspirational, Memorial Day, Freedom',\n",
       " 'Inspirational, Life, Positive',\n",
       " 'Art, Creativity, Mind',\n",
       " 'Motivational, Good Life, Greatness',\n",
       " 'Self Esteem, Greatness, Goal',\n",
       " 'Inspirational, Life, Fear',\n",
       " 'War, Military, Marine',\n",
       " 'Inspirational, Life, Karma',\n",
       " 'Inspirational, Life, Fitness Motivational',\n",
       " 'Inspirational, Motivational, Leadership',\n",
       " 'Light, Use, Be Careful',\n",
       " 'Inspirational, Mistake, Learning',\n",
       " 'Twelve, Way, Found',\n",
       " 'Inspirational, Success, Travel',\n",
       " 'Love, Inspirational, Success',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Encouraging, Courage, Inspiration',\n",
       " 'Life, Happiness, Work',\n",
       " 'Inspirational, Inspiring, Positivity',\n",
       " 'Inspirational, Life, Success',\n",
       " 'Peace, War, Government',\n",
       " 'Life, Strength, Courage',\n",
       " 'Positive, Family, Trust',\n",
       " 'Inspirational, Motivational, Teacher',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Success, Spiritual, Wisdom',\n",
       " 'Inspiring, Encouragement, Bad Day',\n",
       " 'Strength, Christian, Self',\n",
       " 'Life, Motivational, Success',\n",
       " 'Inspirational, Success, Basketball',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Long, Chinese, World',\n",
       " 'Gun, People, Second Amendment',\n",
       " 'Love, Valentines Day, Fate',\n",
       " 'Inspirational, Greatness, Envy',\n",
       " 'Love, Inspiring, Positivity',\n",
       " 'Military, Marine, Hands',\n",
       " 'Practice, Political, Deception',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Love, Life, Crush',\n",
       " 'Inspirational, Motivational, Peace',\n",
       " 'Inspirational, Freedom, Responsibility',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Motivational, Running, Ideas',\n",
       " 'Inspirational, Positive, Success',\n",
       " 'Inspirational, God, Stay Strong',\n",
       " 'Inspirational, Life, Happiness',\n",
       " 'Sports, Hero, News',\n",
       " 'Anger, Adversity, Climbing',\n",
       " 'Inspirational, Inspiring, Friends',\n",
       " 'Inspirational, Funny, Positive',\n",
       " 'Motivational, Inspiration, Adversity',\n",
       " 'Children, Creativity, Ignorance',\n",
       " 'Life, Music, Beautiful',\n",
       " 'Inspirational, Positive, Freedom',\n",
       " 'Inspirational, Life, Bullying',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Inspirational, Inspiring, Beauty',\n",
       " 'Witty, Attitude, Freedom',\n",
       " 'Military, Marine, Men',\n",
       " 'Motivational, Success, Positivity',\n",
       " 'Inspirational, Educational, Learning',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Plato, War, Government',\n",
       " 'Inspirational, Life, Second Chance',\n",
       " 'Motivational, Sports, Football',\n",
       " 'Thanksgiving, Thankful, Gratitude',\n",
       " 'Funny, Humorous, Character',\n",
       " 'Inspirational, Motivational, Badass',\n",
       " 'Life, Inspiring, Encouragement',\n",
       " 'Love, Happiness, Smile',\n",
       " 'Moving On, Famous Inspirational, Greatness',\n",
       " 'Motivational, Happiness, Mean',\n",
       " 'Life, Birthday, Inspiring',\n",
       " 'Children, Educational, Future',\n",
       " 'Change, Inspiring, Life Changing',\n",
       " 'Inspirational, Integrity, Yoga',\n",
       " 'Inspirational, Funny, Life',\n",
       " 'Inspirational, Positive, Wisdom',\n",
       " 'Funny, Hilarious, Education',\n",
       " 'Sheep, Government, Political',\n",
       " 'Leadership, Appreciation, Team Building',\n",
       " 'Inspirational, Change, Success',\n",
       " 'Empowerment, Crowds, Empowering Women',\n",
       " 'Education, Learning, Knowledge',\n",
       " 'Fear, Positivity, Doubting Everything',\n",
       " 'Inspirational, Motivational, Sports',\n",
       " 'Happiness, Inspiring, Happy',\n",
       " 'Funny, Attitude, Climbing',\n",
       " 'Confidence, Littles, Matter',\n",
       " 'Motivational, Buddhist, Children',\n",
       " 'Mean, Opportunity, Nerd',\n",
       " 'Love, Funny, Romantic',\n",
       " 'Inspirational, Positive, Stars',\n",
       " 'Running, Years, Tests',\n",
       " 'Inspirational, Motivational, Relationship',\n",
       " 'Peace, Integrity, Patriotic',\n",
       " 'Happiness, Work, Opportunity',\n",
       " 'Inspiring, Forgiveness, New Beginnings',\n",
       " 'Love, Life, Being Yourself',\n",
       " 'Motivational, Success, Work',\n",
       " 'Positive, Wisdom, Philosophical',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Life, Leadership, Motivational Sports',\n",
       " 'Spiritual, Sufi, Wherever You Are',\n",
       " 'Love, Confidence, Forgiving',\n",
       " 'Inspirational, Motivational, Change',\n",
       " 'Inspirational, Life, Music',\n",
       " 'Artist, Age, Example',\n",
       " 'Inspirational, Motivational, Wise',\n",
       " 'Inspirational, Funny, Stupid',\n",
       " 'Education, Curiosity, Genius',\n",
       " 'Motivational, Inspiring, Leadership',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Love, Inspirational, Motivational',\n",
       " 'Gun, Two, Qualms About',\n",
       " 'Inspirational, Greatness, Best Effort',\n",
       " 'Spiritual, Truth, Yoga',\n",
       " 'Inspirational, Leadership, Education',\n",
       " 'Military, Marine, Two',\n",
       " 'Inspirational, Patience, Spiritual',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Respect, Fear, Integrity',\n",
       " 'Love, Life, Patience',\n",
       " 'Fall, Revolutionary Leaders, Apples',\n",
       " 'Love, Forgiveness, Peace',\n",
       " 'Wisdom, Adversity, Triumph',\n",
       " 'Motivational, Spiritual, Self Esteem',\n",
       " 'Inspirational, Business, Imagination',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Motivational, Success, Education',\n",
       " 'Inspiring, Education, Teacher',\n",
       " 'Determination, Dragons, Hiking',\n",
       " 'Love, Inspirational, Funny',\n",
       " 'Moving On, Break Up, I Miss You',\n",
       " 'Life, Positive, Encouraging',\n",
       " 'Thanksgiving, Thankful, Gratitude',\n",
       " 'Attitude, Positive Thinking, Positivity',\n",
       " 'Inspiration, Miracle, Preparation',\n",
       " 'Life, Motivational, Positive',\n",
       " 'Inspirational, Success, Determination',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Education, Wisdom, Teaching',\n",
       " 'Trust, Faith, Spiritual',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Love, Inspirational, Forgiveness',\n",
       " 'Inspirational, Change, Inspiring',\n",
       " 'Inspirational, Motivational, Strength',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Military, Fighting, Marine',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Love, Family, Marriage',\n",
       " 'Motivational, Military, Marine',\n",
       " 'Change, Thank You, Memorial Day',\n",
       " 'Inspirational, Change, Smile',\n",
       " 'Leadership, Wisdom, Distance',\n",
       " 'Inspirational, Funny, Life',\n",
       " 'Inspirational, Education, Perseverance',\n",
       " 'Love, Inspirational, Dark',\n",
       " 'Freedom, Numbers, Being Free',\n",
       " 'Christian, Feet, Sound',\n",
       " 'Family, Fathers Day, Children',\n",
       " 'Inspirational, Strength, Inspiring',\n",
       " 'Love, Life, Suffering',\n",
       " 'Love, Life, Happy',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Inspirational, Spiritual, Nature',\n",
       " 'New Year, New Beginnings, Might',\n",
       " 'Inspirational, Strength, Success',\n",
       " 'Inspirational, Life, Positive',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Kindness, Thinking, Wicked World',\n",
       " 'Success, Greatness, Errors',\n",
       " 'Christian, Goal, Church',\n",
       " 'Motivational, Inspiring, Graduation',\n",
       " 'Inspirational, Life, Being Yourself',\n",
       " 'Inspirational, Spiritual, Time',\n",
       " 'Integrity, Heart, Positivity',\n",
       " 'Inspirational, Thank You, Thanksgiving',\n",
       " 'Inspirational, Positive, Success',\n",
       " 'Writing, Self Improvement, Self Help',\n",
       " 'Drinking, Sick, Way',\n",
       " 'Family, Mom, Mother',\n",
       " 'Inspirational, Positive, Moving On',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Learning, Miracle, Process',\n",
       " 'Funny, Basketball, Sports',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Change, Positive, Courage',\n",
       " 'Inspirational, Greatness, What Matters',\n",
       " 'Effort, Greed, Needs',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Life, Motivational, Stay Strong',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Inspirational, Funny, Leadership',\n",
       " 'Inspirational, Positive, Determination',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Inspirational, Success, Graduation',\n",
       " 'Teacher, Inspirational Love, Peace',\n",
       " 'Hope, Optimistic, Fighting',\n",
       " 'Inspirational, Memorial Day, Freedom',\n",
       " 'Inspirational, Life, Positive',\n",
       " 'Art, Creativity, Mind',\n",
       " 'Motivational, Good Life, Greatness',\n",
       " 'Self Esteem, Greatness, Goal',\n",
       " 'Inspirational, Life, Fear',\n",
       " 'War, Military, Marine',\n",
       " 'Inspirational, Life, Karma',\n",
       " 'Inspirational, Life, Fitness Motivational',\n",
       " 'Inspirational, Motivational, Leadership',\n",
       " 'Light, Use, Be Careful',\n",
       " 'Inspirational, Mistake, Learning',\n",
       " 'Twelve, Way, Found',\n",
       " 'Inspirational, Success, Travel',\n",
       " 'Love, Inspirational, Success',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Encouraging, Courage, Inspiration',\n",
       " 'Life, Happiness, Work',\n",
       " 'Inspirational, Inspiring, Positivity',\n",
       " 'Inspirational, Life, Success',\n",
       " 'Peace, War, Government',\n",
       " 'Life, Strength, Courage',\n",
       " 'Positive, Family, Trust',\n",
       " 'Inspirational, Motivational, Teacher',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Success, Spiritual, Wisdom',\n",
       " 'Inspiring, Encouragement, Bad Day',\n",
       " 'Strength, Christian, Self',\n",
       " 'Life, Motivational, Success',\n",
       " 'Inspirational, Success, Basketball',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Long, Chinese, World',\n",
       " 'Gun, People, Second Amendment',\n",
       " 'Love, Valentines Day, Fate',\n",
       " 'Inspirational, Greatness, Envy',\n",
       " 'Love, Inspiring, Positivity',\n",
       " 'Military, Marine, Hands',\n",
       " 'Practice, Political, Deception',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Love, Life, Crush',\n",
       " 'Inspirational, Motivational, Peace',\n",
       " 'Inspirational, Freedom, Responsibility',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Motivational, Running, Ideas',\n",
       " 'Inspirational, Positive, Success',\n",
       " 'Inspirational, God, Stay Strong',\n",
       " 'Inspirational, Life, Happiness',\n",
       " 'Sports, Hero, News',\n",
       " 'Anger, Adversity, Climbing',\n",
       " 'Inspirational, Inspiring, Friends',\n",
       " 'Inspirational, Funny, Positive',\n",
       " 'Motivational, Inspiration, Adversity',\n",
       " 'Children, Creativity, Ignorance',\n",
       " 'Life, Music, Beautiful',\n",
       " 'Inspirational, Positive, Freedom',\n",
       " 'Inspirational, Life, Bullying',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Inspirational, Inspiring, Beauty',\n",
       " 'Witty, Attitude, Freedom',\n",
       " 'Military, Marine, Men',\n",
       " 'Motivational, Success, Positivity',\n",
       " 'Inspirational, Educational, Learning',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Plato, War, Government',\n",
       " 'Inspirational, Life, Second Chance',\n",
       " 'Motivational, Sports, Football',\n",
       " 'Thanksgiving, Thankful, Gratitude',\n",
       " 'Funny, Humorous, Character',\n",
       " 'Inspirational, Motivational, Badass',\n",
       " 'Life, Inspiring, Encouragement',\n",
       " 'Love, Happiness, Smile',\n",
       " 'Moving On, Famous Inspirational, Greatness',\n",
       " 'Motivational, Happiness, Mean',\n",
       " 'Life, Birthday, Inspiring',\n",
       " 'Children, Educational, Future',\n",
       " 'Change, Inspiring, Life Changing',\n",
       " 'Inspirational, Integrity, Yoga',\n",
       " 'Inspirational, Funny, Life',\n",
       " 'Inspirational, Positive, Wisdom',\n",
       " 'Funny, Hilarious, Education',\n",
       " 'Sheep, Government, Political',\n",
       " 'Leadership, Appreciation, Team Building',\n",
       " 'Inspirational, Change, Success',\n",
       " 'Empowerment, Crowds, Empowering Women',\n",
       " 'Education, Learning, Knowledge',\n",
       " 'Fear, Positivity, Doubting Everything',\n",
       " 'Inspirational, Motivational, Sports',\n",
       " 'Happiness, Inspiring, Happy',\n",
       " 'Funny, Attitude, Climbing',\n",
       " 'Confidence, Littles, Matter',\n",
       " 'Motivational, Buddhist, Children',\n",
       " 'Mean, Opportunity, Nerd',\n",
       " 'Love, Funny, Romantic',\n",
       " 'Inspirational, Positive, Stars',\n",
       " 'Running, Years, Tests',\n",
       " 'Inspirational, Motivational, Relationship',\n",
       " 'Peace, Integrity, Patriotic',\n",
       " 'Happiness, Work, Opportunity',\n",
       " 'Inspiring, Forgiveness, New Beginnings',\n",
       " 'Love, Life, Being Yourself',\n",
       " 'Motivational, Success, Work',\n",
       " 'Positive, Wisdom, Philosophical',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Life, Leadership, Motivational Sports',\n",
       " 'Spiritual, Sufi, Wherever You Are',\n",
       " 'Love, Confidence, Forgiving',\n",
       " 'Inspirational, Motivational, Change',\n",
       " 'Inspirational, Life, Music',\n",
       " 'Artist, Age, Example',\n",
       " 'Inspirational, Motivational, Wise',\n",
       " 'Inspirational, Funny, Stupid',\n",
       " 'Education, Curiosity, Genius',\n",
       " 'Motivational, Inspiring, Leadership',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Love, Inspirational, Motivational',\n",
       " 'Gun, Two, Qualms About',\n",
       " 'Inspirational, Greatness, Best Effort',\n",
       " 'Spiritual, Truth, Yoga',\n",
       " 'Inspirational, Leadership, Education',\n",
       " 'Military, Marine, Two',\n",
       " 'Inspirational, Patience, Spiritual',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Respect, Fear, Integrity',\n",
       " 'Love, Life, Patience',\n",
       " 'Fall, Revolutionary Leaders, Apples',\n",
       " 'Love, Forgiveness, Peace',\n",
       " 'Wisdom, Adversity, Triumph',\n",
       " 'Motivational, Spiritual, Self Esteem',\n",
       " 'Inspirational, Business, Imagination',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Motivational, Success, Education',\n",
       " 'Inspiring, Education, Teacher',\n",
       " 'Determination, Dragons, Hiking',\n",
       " 'Love, Inspirational, Funny',\n",
       " 'Moving On, Break Up, I Miss You',\n",
       " 'Life, Positive, Encouraging',\n",
       " 'Thanksgiving, Thankful, Gratitude',\n",
       " 'Attitude, Positive Thinking, Positivity',\n",
       " 'Inspiration, Miracle, Preparation',\n",
       " 'Life, Motivational, Positive',\n",
       " 'Inspirational, Success, Determination',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Education, Wisdom, Teaching',\n",
       " 'Trust, Faith, Spiritual',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Love, Inspirational, Forgiveness',\n",
       " 'Inspirational, Change, Inspiring',\n",
       " 'Inspirational, Motivational, Strength',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Military, Fighting, Marine',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Love, Family, Marriage',\n",
       " 'Motivational, Military, Marine',\n",
       " 'Change, Thank You, Memorial Day',\n",
       " 'Inspirational, Change, Smile',\n",
       " 'Leadership, Wisdom, Distance',\n",
       " 'Inspirational, Funny, Life',\n",
       " 'Inspirational, Education, Perseverance',\n",
       " 'Love, Inspirational, Dark',\n",
       " 'Freedom, Numbers, Being Free',\n",
       " 'Christian, Feet, Sound',\n",
       " 'Family, Fathers Day, Children',\n",
       " 'Inspirational, Strength, Inspiring',\n",
       " 'Love, Life, Suffering',\n",
       " 'Love, Life, Happy',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Inspirational, Spiritual, Nature',\n",
       " 'New Year, New Beginnings, Might',\n",
       " 'Inspirational, Strength, Success',\n",
       " 'Inspirational, Life, Positive',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Kindness, Thinking, Wicked World',\n",
       " 'Success, Greatness, Errors',\n",
       " 'Christian, Goal, Church',\n",
       " 'Motivational, Inspiring, Graduation',\n",
       " 'Inspirational, Life, Being Yourself',\n",
       " 'Inspirational, Spiritual, Time',\n",
       " 'Integrity, Heart, Positivity',\n",
       " 'Inspirational, Thank You, Thanksgiving',\n",
       " 'Inspirational, Positive, Success',\n",
       " 'Writing, Self Improvement, Self Help',\n",
       " 'Drinking, Sick, Way',\n",
       " 'Family, Mom, Mother',\n",
       " 'Inspirational, Positive, Moving On',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Learning, Miracle, Process',\n",
       " 'Funny, Basketball, Sports',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Change, Positive, Courage',\n",
       " 'Inspirational, Greatness, What Matters',\n",
       " 'Effort, Greed, Needs',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Life, Motivational, Stay Strong',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Inspirational, Funny, Leadership',\n",
       " 'Inspirational, Positive, Determination',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Inspirational, Success, Graduation',\n",
       " 'Teacher, Inspirational Love, Peace',\n",
       " 'Hope, Optimistic, Fighting',\n",
       " 'Inspirational, Memorial Day, Freedom',\n",
       " 'Inspirational, Life, Positive',\n",
       " 'Art, Creativity, Mind',\n",
       " 'Motivational, Good Life, Greatness',\n",
       " 'Self Esteem, Greatness, Goal',\n",
       " 'Inspirational, Life, Fear',\n",
       " 'War, Military, Marine',\n",
       " 'Inspirational, Life, Karma',\n",
       " 'Inspirational, Life, Fitness Motivational',\n",
       " 'Inspirational, Motivational, Leadership',\n",
       " 'Light, Use, Be Careful',\n",
       " 'Inspirational, Mistake, Learning',\n",
       " 'Twelve, Way, Found',\n",
       " 'Inspirational, Success, Travel',\n",
       " 'Love, Inspirational, Success',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Encouraging, Courage, Inspiration',\n",
       " 'Life, Happiness, Work',\n",
       " 'Inspirational, Inspiring, Positivity',\n",
       " 'Inspirational, Life, Success',\n",
       " 'Peace, War, Government',\n",
       " 'Life, Strength, Courage',\n",
       " 'Positive, Family, Trust',\n",
       " 'Inspirational, Motivational, Teacher',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Success, Spiritual, Wisdom',\n",
       " 'Inspiring, Encouragement, Bad Day',\n",
       " 'Strength, Christian, Self',\n",
       " 'Life, Motivational, Success',\n",
       " 'Inspirational, Success, Basketball',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Long, Chinese, World',\n",
       " 'Gun, People, Second Amendment',\n",
       " 'Love, Valentines Day, Fate',\n",
       " 'Inspirational, Greatness, Envy',\n",
       " 'Love, Inspiring, Positivity',\n",
       " 'Military, Marine, Hands',\n",
       " 'Practice, Political, Deception',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Love, Life, Crush',\n",
       " 'Inspirational, Motivational, Peace',\n",
       " 'Inspirational, Freedom, Responsibility',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Motivational, Running, Ideas',\n",
       " 'Inspirational, Positive, Success',\n",
       " 'Inspirational, God, Stay Strong',\n",
       " 'Inspirational, Life, Happiness',\n",
       " 'Sports, Hero, News',\n",
       " 'Anger, Adversity, Climbing',\n",
       " 'Inspirational, Inspiring, Friends',\n",
       " 'Inspirational, Funny, Positive',\n",
       " 'Motivational, Inspiration, Adversity',\n",
       " 'Children, Creativity, Ignorance',\n",
       " 'Life, Music, Beautiful',\n",
       " 'Inspirational, Positive, Freedom',\n",
       " 'Inspirational, Life, Bullying',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Inspirational, Inspiring, Beauty',\n",
       " 'Witty, Attitude, Freedom',\n",
       " 'Military, Marine, Men',\n",
       " 'Motivational, Success, Positivity',\n",
       " 'Inspirational, Educational, Learning',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Plato, War, Government',\n",
       " 'Inspirational, Life, Second Chance',\n",
       " 'Motivational, Sports, Football',\n",
       " 'Thanksgiving, Thankful, Gratitude',\n",
       " 'Funny, Humorous, Character',\n",
       " 'Inspirational, Motivational, Badass',\n",
       " 'Life, Inspiring, Encouragement',\n",
       " 'Love, Happiness, Smile',\n",
       " 'Moving On, Famous Inspirational, Greatness',\n",
       " 'Motivational, Happiness, Mean',\n",
       " 'Life, Birthday, Inspiring',\n",
       " 'Children, Educational, Future',\n",
       " 'Change, Inspiring, Life Changing',\n",
       " 'Inspirational, Integrity, Yoga',\n",
       " 'Inspirational, Funny, Life',\n",
       " 'Inspirational, Positive, Wisdom',\n",
       " 'Funny, Hilarious, Education',\n",
       " 'Sheep, Government, Political',\n",
       " 'Leadership, Appreciation, Team Building',\n",
       " 'Inspirational, Change, Success',\n",
       " 'Empowerment, Crowds, Empowering Women',\n",
       " 'Education, Learning, Knowledge',\n",
       " 'Fear, Positivity, Doubting Everything',\n",
       " 'Inspirational, Motivational, Sports',\n",
       " 'Happiness, Inspiring, Happy',\n",
       " 'Funny, Attitude, Climbing',\n",
       " 'Confidence, Littles, Matter',\n",
       " 'Motivational, Buddhist, Children',\n",
       " 'Mean, Opportunity, Nerd',\n",
       " 'Love, Funny, Romantic',\n",
       " 'Inspirational, Positive, Stars',\n",
       " 'Running, Years, Tests',\n",
       " 'Inspirational, Motivational, Relationship',\n",
       " 'Peace, Integrity, Patriotic',\n",
       " 'Happiness, Work, Opportunity',\n",
       " 'Inspiring, Forgiveness, New Beginnings',\n",
       " 'Love, Life, Being Yourself',\n",
       " 'Motivational, Success, Work',\n",
       " 'Positive, Wisdom, Philosophical',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Life, Leadership, Motivational Sports',\n",
       " 'Spiritual, Sufi, Wherever You Are',\n",
       " 'Love, Confidence, Forgiving',\n",
       " 'Inspirational, Motivational, Change',\n",
       " 'Inspirational, Life, Music',\n",
       " 'Artist, Age, Example',\n",
       " 'Inspirational, Motivational, Wise',\n",
       " 'Inspirational, Funny, Stupid',\n",
       " 'Education, Curiosity, Genius',\n",
       " 'Motivational, Inspiring, Leadership',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Love, Inspirational, Motivational',\n",
       " 'Gun, Two, Qualms About',\n",
       " 'Inspirational, Greatness, Best Effort',\n",
       " 'Spiritual, Truth, Yoga',\n",
       " 'Inspirational, Leadership, Education',\n",
       " 'Inspirational, Life, Success',\n",
       " 'Peace, War, Government',\n",
       " 'Life, Strength, Courage',\n",
       " 'Positive, Family, Trust',\n",
       " 'Inspirational, Motivational, Teacher',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Success, Spiritual, Wisdom',\n",
       " 'Inspiring, Encouragement, Bad Day',\n",
       " 'Strength, Christian, Self',\n",
       " 'Life, Motivational, Success',\n",
       " 'Inspirational, Success, Basketball',\n",
       " 'Inspirational, Motivational, Positive',\n",
       " 'Long, Chinese, World',\n",
       " 'Gun, People, Second Amendment',\n",
       " 'Love, Valentines Day, Fate',\n",
       " 'Inspirational, Greatness, Envy',\n",
       " 'Love, Inspiring, Positivity',\n",
       " 'Military, Marine, Hands',\n",
       " 'Practice, Political, Deception',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Love, Life, Crush',\n",
       " 'Inspirational, Motivational, Peace',\n",
       " 'Inspirational, Freedom, Responsibility',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Motivational, Running, Ideas',\n",
       " 'Inspirational, Positive, Success',\n",
       " 'Inspirational, God, Stay Strong',\n",
       " 'Inspirational, Life, Happiness',\n",
       " 'Sports, Hero, News',\n",
       " 'Anger, Adversity, Climbing',\n",
       " 'Inspirational, Inspiring, Friends',\n",
       " 'Inspirational, Funny, Positive',\n",
       " 'Motivational, Inspiration, Adversity',\n",
       " 'Children, Creativity, Ignorance',\n",
       " 'Life, Music, Beautiful',\n",
       " 'Inspirational, Positive, Freedom',\n",
       " 'Inspirational, Life, Bullying',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Inspirational, Inspiring, Beauty',\n",
       " 'Witty, Attitude, Freedom',\n",
       " 'Military, Marine, Men',\n",
       " 'Motivational, Success, Positivity',\n",
       " 'Inspirational, Educational, Learning',\n",
       " 'Inspirational, Motivational, Success',\n",
       " 'Plato, War, Government',\n",
       " 'Inspirational, Life, Second Chance',\n",
       " 'Motivational, Sports, Football',\n",
       " 'Thanksgiving, Thankful, Gratitude',\n",
       " 'Funny, Humorous, Character',\n",
       " 'Inspirational, Motivational, Badass',\n",
       " 'Life, Inspiring, Encouragement',\n",
       " 'Love, Happiness, Smile',\n",
       " 'Moving On, Famous Inspirational, Greatness',\n",
       " 'Motivational, Happiness, Mean',\n",
       " 'Life, Birthday, Inspiring',\n",
       " 'Children, Educational, Future',\n",
       " 'Change, Inspiring, Life Changing',\n",
       " 'Inspirational, Integrity, Yoga',\n",
       " 'Inspirational, Funny, Life',\n",
       " 'Inspirational, Positive, Wisdom',\n",
       " 'Funny, Hilarious, Education',\n",
       " 'Sheep, Government, Political',\n",
       " 'Leadership, Appreciation, Team Building',\n",
       " 'Inspirational, Change, Success',\n",
       " 'Empowerment, Crowds, Empowering Women',\n",
       " 'Education, Learning, Knowledge',\n",
       " 'Fear, Positivity, Doubting Everything',\n",
       " 'Inspirational, Motivational, Sports',\n",
       " 'Happiness, Inspiring, Happy',\n",
       " 'Funny, Attitude, Climbing',\n",
       " 'Confidence, Littles, Matter',\n",
       " 'Motivational, Buddhist, Children',\n",
       " 'Mean, Opportunity, Nerd',\n",
       " 'Love, Funny, Romantic',\n",
       " 'Inspirational, Positive, Stars',\n",
       " 'Running, Years, Tests',\n",
       " 'Inspirational, Motivational, Relationship',\n",
       " 'Peace, Integrity, Patriotic',\n",
       " 'Happiness, Work, Opportunity',\n",
       " 'Inspiring, Forgiveness, New Beginnings',\n",
       " 'Love, Life, Being Yourself',\n",
       " 'Motivational, Success, Work',\n",
       " 'Positive, Wisdom, Philosophical',\n",
       " 'Inspirational, Life, Motivational',\n",
       " 'Life, Leadership, Motivational Sports',\n",
       " 'Spiritual, Sufi, Wherever You Are',\n",
       " 'Love, Confidence, Forgiving',\n",
       " 'Inspirational, Motivational, Change',\n",
       " 'Inspirational, Life, Music',\n",
       " 'Artist, Age, Example',\n",
       " 'Inspirational, Motivational, Wise',\n",
       " 'Inspirational, Funny, Stupid',\n",
       " 'Education, Curiosity, Genius',\n",
       " 'Motivational, Inspiring, Leadership',\n",
       " 'Love, Inspirational, Life',\n",
       " 'Love, Inspirational, Motivational',\n",
       " 'Gun, Two, Qualms About',\n",
       " 'Inspirational, Greatness, Best Effort',\n",
       " 'Spiritual, Truth, Yoga',\n",
       " 'Inspirational, Leadership, Education']"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3=typeofquote[0:1000]\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "23775acd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Quote</th>\n",
       "      <th>Author</th>\n",
       "      <th>Type of quote</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The essence of strategy is choosing what not t...</td>\n",
       "      <td>Michael Porter</td>\n",
       "      <td>Essence, Deep Thought, Transcendentalism</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>One cannot and must not try to erase the past ...</td>\n",
       "      <td>Golda Meir</td>\n",
       "      <td>Inspiration, Past, Trying</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Patriotism means to stand by the country. It d...</td>\n",
       "      <td>Theodore Roosevelt</td>\n",
       "      <td>Country, Peace, War</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Death is something inevitable. When a man has ...</td>\n",
       "      <td>Nelson Mandela</td>\n",
       "      <td>Inspirational, Motivational, Death</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>You have to love a nation that celebrates its ...</td>\n",
       "      <td>Erma Bombeck</td>\n",
       "      <td>4th Of July, Food, Patriotic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>To love means loving the unlovable. To forgive...</td>\n",
       "      <td>Andy Rooney</td>\n",
       "      <td>Love, Inspirational, Motivational</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>If you really want to do something, you'll fin...</td>\n",
       "      <td>Rick Warren</td>\n",
       "      <td>Gun, Two, Qualms About</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>Be brave. Take risks. Nothing can substitute e...</td>\n",
       "      <td>Abraham Lincoln</td>\n",
       "      <td>Inspirational, Greatness, Best Effort</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>It is neither wealth nor splendor; but tranqui...</td>\n",
       "      <td>Thomas Jefferson</td>\n",
       "      <td>Spiritual, Truth, Yoga</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>A thousand words will not leave so deep an imp...</td>\n",
       "      <td>Tim Allen</td>\n",
       "      <td>Inspirational, Leadership, Education</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 Quote              Author  \\\n",
       "0    The essence of strategy is choosing what not t...      Michael Porter   \n",
       "1    One cannot and must not try to erase the past ...          Golda Meir   \n",
       "2    Patriotism means to stand by the country. It d...  Theodore Roosevelt   \n",
       "3    Death is something inevitable. When a man has ...      Nelson Mandela   \n",
       "4    You have to love a nation that celebrates its ...        Erma Bombeck   \n",
       "..                                                 ...                 ...   \n",
       "995  To love means loving the unlovable. To forgive...         Andy Rooney   \n",
       "996  If you really want to do something, you'll fin...         Rick Warren   \n",
       "997  Be brave. Take risks. Nothing can substitute e...     Abraham Lincoln   \n",
       "998  It is neither wealth nor splendor; but tranqui...    Thomas Jefferson   \n",
       "999  A thousand words will not leave so deep an imp...           Tim Allen   \n",
       "\n",
       "                                Type of quote  \n",
       "0    Essence, Deep Thought, Transcendentalism  \n",
       "1                   Inspiration, Past, Trying  \n",
       "2                         Country, Peace, War  \n",
       "3          Inspirational, Motivational, Death  \n",
       "4                4th Of July, Food, Patriotic  \n",
       "..                                        ...  \n",
       "995         Love, Inspirational, Motivational  \n",
       "996                    Gun, Two, Qualms About  \n",
       "997     Inspirational, Greatness, Best Effort  \n",
       "998                    Spiritual, Truth, Yoga  \n",
       "999      Inspirational, Leadership, Education  \n",
       "\n",
       "[1000 rows x 3 columns]"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.DataFrame({'Quote':quote,'Author':df2,'Type of quote':df3})\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3f05230",
   "metadata": {},
   "source": [
    "QUESTION-10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "eeadac34",
   "metadata": {},
   "outputs": [],
   "source": [
    "driver=webdriver.Chrome(r'/Users/muskansureka/Desktop/chromedriver.exe')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "66428a02",
   "metadata": {},
   "outputs": [],
   "source": [
    "driver.get('https://www.motor1.com/')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2d0e500",
   "metadata": {},
   "source": [
    "CONTENT DOES NOT EXIST, CANNOT SCRAPE DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0a50b50",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
